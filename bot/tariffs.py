from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
import time
import logging
import os
from datetime import datetime, timedelta

from db.database import Database
from bot.payment_systems import PaymentSystems
from bot.utils.funcs import error_notify
from config.parameters_manager import ParametersManager

router = Router(name="tariffs")
db = Database()
payment_systems = PaymentSystems()

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
TARIFF_LOGOS_DIR = "client/tariff_logos"


class TariffPurchaseStates(StatesGroup):
    waiting_for_tariff = State()
    waiting_for_payment = State()
    waiting_for_payment_method = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã


@router.callback_query(F.data == "buy_tariff")
async def show_available_tariffs(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    tariffs = db.get_all_tariff_plans(active_only=True)[
        1:
    ]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã, –∏—Å–∫–ª—é—á–∞—è –Ω—É–ª–µ–≤–æ–π

    if not tariffs:
        await callback.message.edit_text(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"
                        )
                    ]
                ]
            ),
        )
        return

    builder = InlineKeyboardBuilder()
    for tariff in tariffs:
        builder.button(
            text=f"{tariff.name} - {tariff.price/100}‚ÇΩ/–º–µ—Å",
            callback_data=f"select_tariff_{tariff.id}",
        )
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)

    text = "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
    for tariff in tariffs:
        text += (
            f"üìå {tariff.name}\n"
            f"üí∞ –¶–µ–Ω–∞: {tariff.price/100}‚ÇΩ/–º–µ—Å—è—Ü\n"
            f"üìä –ú–∞–∫—Å. –ø—Ä–æ–µ–∫—Ç–æ–≤: {tariff.max_projects}\n"
            f"üí¨ –ú–∞–∫—Å. —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {tariff.max_chats_per_project}\n\n"
        )

    await callback.message.edit_text(text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("select_tariff_"))
async def select_tariff(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    tariff_id = int(callback.data.split("_")[2])
    tariff = db.get_tariff_plan(tariff_id)

    if not tariff:
        await callback.message.edit_text(
            "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
                ]
            ),
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_tariff = db.get_user_tariff(callback.from_user.id)
    if current_tariff:
        current_tariff_plan = db.get_tariff_plan(current_tariff.tariff_plan_id)
        await callback.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {current_tariff_plan.name}\n"
            f"–û–Ω –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: {tariff.name}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –î–∞", callback_data=f"confirm_tariff_{tariff_id}"
                        )
                    ],
                    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="buy_tariff")],
                ]
            ),
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∞—Ä–∏—Ñ–µ
    amount = tariff.price / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
    await state.update_data(tariff_id=tariff_id, amount=amount, tariff_name=tariff.name)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await callback.message.edit_text(
        f"üéØ –¢–∞—Ä–∏—Ñ: {tariff.name}\n"
        f"üí∞ –¶–µ–Ω–∞: {amount}‚ÇΩ/–º–µ—Å—è—Ü\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_systems.get_payment_methods_keyboard(),
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await state.set_state(TariffPurchaseStates.waiting_for_payment_method)


@router.callback_query(TariffPurchaseStates.waiting_for_payment_method)
async def process_payment_method(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞"""
    data = await state.get_data()
    tariff_id = data.get("tariff_id")
    amount = data.get("amount")
    tariff_name = data.get("tariff_name")

    if not tariff_id or not amount:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
                ]
            ),
        )
        await state.clear()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º order_id –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    order_id = f"tariff_{callback.from_user.id}_{tariff_id}_{int(time.time())}"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
    payment_method = None
    if callback.data == "payment_yookassa":
        payment_method = "yookassa"
    elif callback.data == "payment_freekassa":
        payment_method = "freekassa"

    if payment_method:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        payload = f"tariff_{callback.from_user.id}_{tariff_id}"

        success = await payment_systems.process_payment(
            bot=bot,
            user_id=callback.from_user.id,
            amount=float(amount),
            title=f"–¢–∞—Ä–∏—Ñ {tariff_name}",
            description=f"–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_name} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±–ª–µ–π",
            payload=payload,
            payment_method=payment_method,
        )

        if not success:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff"
                            )
                        ]
                    ]
                ),
            )

    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "cancel_tariff_payment")
async def cancel_tariff_payment(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
            ]
        ),
    )


@router.callback_query(F.data.startswith("confirm_tariff_"))
async def confirm_tariff_selection(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ"""
    tariff_id = int(callback.data.split("_")[2])
    tariff = db.get_tariff_plan(tariff_id)

    if not tariff:
        await callback.message.edit_text(
            "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
                ]
            ),
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∞—Ä–∏—Ñ–µ
    amount = tariff.price / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
    await state.update_data(tariff_id=tariff_id, amount=amount, tariff_name=tariff.name)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await callback.message.edit_text(
        f"üéØ –¢–∞—Ä–∏—Ñ: {tariff.name}\n"
        f"üí∞ –¶–µ–Ω–∞: {amount}‚ÇΩ/–º–µ—Å—è—Ü\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_systems.get_payment_methods_keyboard(),
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await state.set_state(TariffPurchaseStates.waiting_for_payment_method)
