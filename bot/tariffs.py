from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
import time
import logging
import os

from db.database import Database
from bot.freekassa import FreeKassa
from config.parameters_manager import ParametersManager
from bot.utils.funcs import error_notify

router = Router(name="tariffs")
db = Database()

freekassa = FreeKassa(
    shop_id=int(ParametersManager.get_parameter("shop_id")),
    secret_word_1=str(ParametersManager.get_parameter("secret_word_1")),
    secret_word_2=str(ParametersManager.get_parameter("secret_word_2")),
)


class TariffPurchaseStates(StatesGroup):
    waiting_for_tariff = State()
    waiting_for_payment = State()


@router.callback_query(F.data == "buy_tariff")
async def show_available_tariffs(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    tariffs = db.get_all_tariff_plans(active_only=True)[
        1:
    ]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã, –∏—Å–∫–ª—é—á–∞—è –Ω—É–ª–µ–≤–æ–π

    if not tariffs:
        await callback.message.edit_text(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"
                        )
                    ]
                ]
            ),
        )
        return

    builder = InlineKeyboardBuilder()
    for tariff in tariffs:
        builder.button(
            text=f"{tariff.name} - {tariff.price/100}‚ÇΩ/–º–µ—Å",
            callback_data=f"select_tariff_{tariff.id}",
        )
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)

    text = "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
    for tariff in tariffs:
        text += (
            f"üìå {tariff.name}\n"
            f"üí∞ –¶–µ–Ω–∞: {tariff.price/100}‚ÇΩ/–º–µ—Å—è—Ü\n"
            f"üìä –ú–∞–∫—Å. –ø—Ä–æ–µ–∫—Ç–æ–≤: {tariff.max_projects}\n"
            f"üí¨ –ú–∞–∫—Å. —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {tariff.max_chats_per_project}\n\n"
        )

    await callback.message.edit_text(text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("select_tariff_"))
async def select_tariff(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    tariff_id = int(callback.data.split("_")[2])
    tariff = db.get_tariff_plan(tariff_id)

    if not tariff:
        await callback.message.edit_text(
            "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
                ]
            ),
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_tariff = db.get_user_tariff(callback.from_user.id)
    if current_tariff:
        current_tariff_plan = db.get_tariff_plan(current_tariff.tariff_plan_id)
        await callback.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {current_tariff_plan.name}\n"
            f"–û–Ω –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: {tariff.name}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –î–∞", callback_data=f"confirm_tariff_{tariff_id}"
                        )
                    ],
                    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="buy_tariff")],
                ]
            ),
        )
        return

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ FreeKassa
    order_id = f"tariff_{callback.from_user.id}_{tariff_id}_{int(time.time())}"
    amount = tariff.price / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏

    payment = freekassa.generate_payment_url(
        amount=amount,
        order_id=order_id,
    )

    if not payment:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
                ]
            ),
        )
        await state.clear()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment)],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_tariff_payment"
                )
            ],
        ]
    )

    await callback.message.edit_text(
        f"üí∞ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω\n"
        f"ID –ø–ª–∞—Ç–µ–∂–∞: {order_id.replace('tariff_', '')}\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª\n"
        "2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n"
        "3. –¢–∞—Ä–∏—Ñ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"
        f"–ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}",
        reply_markup=keyboard,
    )


@router.callback_query(F.data == "cancel_tariff_payment")
async def cancel_tariff_payment(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
            ]
        ),
    )


@router.callback_query(F.data.startswith("confirm_tariff_"))
async def confirm_tariff_selection(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ"""
    tariff_id = int(callback.data.split("_")[2])
    tariff = db.get_tariff_plan(tariff_id)

    if not tariff:
        await callback.message.edit_text(
            "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
                ]
            ),
        )
        return

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ FreeKassa
    order_id = f"tariff_{callback.from_user.id}_{tariff_id}_{int(time.time())}"
    amount = tariff.price / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏

    payment = freekassa.generate_payment_url(
        amount=amount,
        order_id=order_id,
    )

    if not payment:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
                ]
            ),
        )
        await state.clear()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment)],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_tariff_payment"
                )
            ],
        ]
    )

    await callback.message.edit_text(
        f"üí≥ –û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff.name}\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount}‚ÇΩ\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
        reply_markup=keyboard,
    )
