from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from db.database import Database
from config.parameters_manager import ParametersManager

logger = logging.getLogger(__name__)

router = Router(name="admin_parameters")
db = Database()


class AdminParameterStates(StatesGroup):
    waiting_for_value = State()


@router.callback_query(F.data == "edit_params")
async def show_parameters(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    params = ParametersManager._config
    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}"
    )
    text = "üìã –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n"
    for param, value in params.items():
        text += f"‚Ä¢ {param}: {value}\n"

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä", callback_data="change_param"
                )
            ],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")],
        ]
    )
    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data == "change_param")
async def select_parameter(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –Ω–∞—á–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    params = ParametersManager._config
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=param, callback_data=f"param_{param}")]
            for param in params.keys()
        ]
    )
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("param_"))
async def enter_new_value(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    param_name = callback.data.replace("param_", "")
    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä {param_name} –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    )
    await state.update_data(selected_param=param_name)
    await state.set_state(AdminParameterStates.waiting_for_value)
    current_value = ParametersManager.get_parameter(param_name)
    logger.debug(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param_name}: {current_value}")
    await callback.message.edit_text(
        f"–ü–∞—Ä–∞–º–µ—Ç—Ä: {param_name}\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    )


@router.message(AdminParameterStates.waiting_for_value)
async def save_new_value(message: types.Message, state: FSMContext):
    if not db.get_user(message.from_user.id).is_admin:
        return

    data = await state.get_data()
    param_name = data["selected_param"]
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä {param_name}")

    try:
        current_value = ParametersManager.get_parameter(param_name)
        new_value = type(current_value)(message.text)
        ParametersManager.set_parameter(param_name, new_value)
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_value}")
        await message.answer(
            f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_value}"
        )
    except ValueError:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param_name}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è"
        )
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è")

    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    from .menu import admin_menu

    await admin_menu(message)
