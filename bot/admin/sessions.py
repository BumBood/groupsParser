from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os
import zipfile
import rarfile
import shutil
import json
from pathlib import Path
import logging

from db.database import Database
from client.session_manager import (
    SessionManager,
    HistorySessionManager,
    RealTimeSessionManager,
)
from bot.utils.pagination import Paginator

logger = logging.getLogger(__name__)

router = Router(name="admin_sessions")
db = Database()


class AdminSessionStates(StatesGroup):
    waiting_for_archive = State()
    waiting_for_directory_choice = State()


async def validate_sessions(sessions_dir: str) -> tuple[list, list]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ .session –∏ .json —Ñ–∞–π–ª–æ–≤

    Returns:
        tuple[list, list]: (—Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫, —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä —Ñ–∞–π–ª–æ–≤)
    """
    logger.info(f"–ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {sessions_dir}")
    errors = []
    valid_pairs = []

    session_files = set(Path(sessions_dir).glob("*.session"))
    json_files = set(Path(sessions_dir).glob("*.json"))

    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ .session —Ñ–∞–π–ª–æ–≤: {len(session_files)}")
    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ .json —Ñ–∞–π–ª–æ–≤: {len(json_files)}")

    session_names = {f.stem for f in session_files}
    json_names = {f.stem for f in json_files}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .session —Ñ–∞–π–ª—ã –±–µ–∑ –ø–∞—Ä—ã
    for name in session_names - json_names:
        error_msg = f"‚ùå –§–∞–π–ª {name}.session –Ω–µ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ .json —Ñ–∞–π–ª–∞"
        logger.warning(error_msg)
        errors.append(error_msg)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .json —Ñ–∞–π–ª—ã –±–µ–∑ –ø–∞—Ä—ã
    for name in json_names - session_names:
        error_msg = f"‚ùå –§–∞–π–ª {name}.json –Ω–µ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ .session —Ñ–∞–π–ª–∞"
        logger.warning(error_msg)
        errors.append(error_msg)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä—ã
    for name in session_names & json_names:
        try:
            with open(f"{sessions_dir}/{name}.json") as f:
                json.load(f)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
            logger.debug(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞—Ä–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ {name}")
            valid_pairs.append(name)
        except json.JSONDecodeError:
            error_msg = f"‚ùå –§–∞–π–ª {name}.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON"
            logger.error(error_msg)
            errors.append(error_msg)

    logger.info(
        f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(valid_pairs)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä –∏ {len(errors)} –æ—à–∏–±–æ–∫"
    )
    return errors, valid_pairs


@router.callback_query(F.data == "upload_session")
async def request_archive(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Å—Å–∏–π")
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üìÅ History (–ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏)",
                    callback_data="upload_to_history",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üìÅ Realtime (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)",
                    callback_data="upload_to_realtime",
                )
            ],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")],
        ]
    )
    await callback.message.edit_text(
        "üì§ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π:", reply_markup=keyboard
    )
    await state.set_state(AdminSessionStates.waiting_for_directory_choice)


@router.callback_query(
    AdminSessionStates.waiting_for_directory_choice, F.data.startswith("upload_to_")
)
async def handle_directory_choice(callback: types.CallbackQuery, state: FSMContext):
    directory_type = callback.data.replace("upload_to_", "")
    await state.update_data(target_directory=directory_type)

    await callback.message.edit_text(
        f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP –∏–ª–∏ RAR –∞—Ä—Ö–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤ .session –∏ .json\n"
        f"‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏ —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∏–º–µ–Ω–∞–º–∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã\n\n"
        f"–í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {'–ò—Å—Ç–æ—Ä–∏—è' if directory_type == 'history' else '–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è'}"
    )
    await state.set_state(AdminSessionStates.waiting_for_archive)


@router.message(AdminSessionStates.waiting_for_archive, F.document)
async def handle_archive(message: types.Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    target_directory = user_data.get("target_directory", "history")

    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω –∞—Ä—Ö–∏–≤ —Å —Å–µ—Å—Å–∏—è–º–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id} –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {target_directory}"
    )

    if not message.document.file_name.endswith((".zip", ".rar")):
        logger.warning(
            f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}"
        )
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .zip –∏–ª–∏ .rar")
        return

    try:
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞")
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = "temp_sessions"
        os.makedirs(temp_dir, exist_ok=True)

        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        archive_path = f"{temp_dir}/archive"
        file = await bot.get_file(message.document.file_id)
        await bot.download_file(file.file_path, archive_path)

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        extract_dir = f"{temp_dir}/extracted"
        os.makedirs(extract_dir, exist_ok=True)

        if message.document.file_name.endswith(".zip"):
            with zipfile.ZipFile(archive_path, "r") as zip_ref:
                zip_ref.extractall(extract_dir)
        else:
            with rarfile.RarFile(archive_path, "r") as rar_ref:
                rar_ref.extractall(extract_dir)

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        errors, valid_pairs = await validate_sessions(extract_dir)

        if errors:
            error_text = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ—à–∏–±–∫–∏:\n" + "\n".join(errors)
            await message.answer(error_text)
            return

        if not valid_pairs:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä —Ñ–∞–π–ª–æ–≤ session/json")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_directory == "history":
            sessions_dir = "client/sessions/history"
        else:
            sessions_dir = "client/sessions/realtime"

        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(sessions_dir, exist_ok=True)

        # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        for name in valid_pairs:
            shutil.copy(
                f"{extract_dir}/{name}.session", f"{sessions_dir}/{name}.session"
            )
            shutil.copy(f"{extract_dir}/{name}.json", f"{sessions_dir}/{name}.json")

        await message.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(valid_pairs)} —Å–µ—Å—Å–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {target_directory}:\n"
            + "\n".join(f"‚Ä¢ {name}" for name in valid_pairs)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞: {str(e)}")

    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        shutil.rmtree(temp_dir, ignore_errors=True)
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
        from .menu import admin_menu

        await admin_menu(message)


@router.callback_query(F.data == "view_sessions")
async def view_sessions(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–µ—Å—Å–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üìÅ History (–ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏)",
                    callback_data="view_history_sessions",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üìÅ Realtime (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)",
                    callback_data="view_realtime_sessions",
                )
            ],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")],
        ]
    )

    await callback.message.edit_text(
        "üì± –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("view_"))
async def handle_view_sessions_type(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    session_type = callback.data.replace("view_", "").replace("_sessions", "")
    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Å—Å–∏–π —Ç–∏–ø–∞ {session_type}"
    )

    # –í—ã–±–∏—Ä–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–µ—Å—Å–∏–π
    if session_type == "history":
        session_manager = HistorySessionManager()
    else:
        session_manager = RealTimeSessionManager(db)

    sessions = session_manager.get_sessions_info()

    if not sessions:
        logger.info(f"–°–µ—Å—Å–∏–∏ —Ç–∏–ø–∞ {session_type} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_sessions"
                    )
                ]
            ]
        )
        await callback.message.edit_text(
            f"üì± –°–µ—Å—Å–∏–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {session_type} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=keyboard,
        )
        return

    def session_callback(session: dict) -> tuple[str, str]:
        return (
            f"+{session['phone']}",
            f"session_info_{session_type}_{session['session_name']}",
        )

    paginator = Paginator(
        items=sessions,
        items_per_page=4,
        callback_prefix=f"{session_type}_sessions",
        item_callback=session_callback,
        return_callback="view_sessions",
    )

    await callback.message.edit_text(
        f"üì± –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π ({session_type}):",
        reply_markup=paginator.get_page_keyboard(0),
    )


@router.callback_query(
    F.data.startswith("history_sessions_page_")
    | F.data.startswith("realtime_sessions_page_")
)
async def handle_sessions_page(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    parts = callback.data.split("_")
    session_type = parts[0]  # history –∏–ª–∏ realtime
    page = int(parts[-1])

    if session_type == "history":
        session_manager = HistorySessionManager()
    else:
        session_manager = RealTimeSessionManager(db)

    sessions = session_manager.get_sessions_info()

    def session_callback(session: dict) -> tuple[str, str]:
        return (
            f"+{session['phone']}",
            f"session_info_{session_type}_{session['session_name']}",
        )

    paginator = Paginator(
        items=sessions,
        items_per_page=4,
        callback_prefix=f"{session_type}_sessions",
        item_callback=session_callback,
        return_callback="view_sessions",
    )

    await callback.message.edit_text(
        f"üì± –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π ({session_type}):",
        reply_markup=paginator.get_page_keyboard(page),
    )


@router.callback_query(F.data.startswith("session_info_"))
async def show_session_info(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Å–µ—Å—Å–∏–∏ –∏ –∏–º—è —Å–µ—Å—Å–∏–∏
    parts = callback.data.replace("session_info_", "").split("_", 1)
    session_type = parts[0]  # history –∏–ª–∏ realtime
    session_name = parts[1]

    if session_type == "history":
        session_manager = HistorySessionManager()
    else:
        session_manager = RealTimeSessionManager(db)

    sessions = session_manager.get_sessions_info()

    session = next((s for s in sessions if s["session_name"] == session_name), None)
    if not session:
        await callback.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    text = (
        f"üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏:\n\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {session['phone']}\n"
        f"üë§ Username: @{session['username']}\n"
        f"üìù –ò–º—è: {session['first_name']} {session['last_name']}\n"
        f"üîë –§–∞–π–ª: {session['session_name']}\n"
        f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {session_type}"
    )

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é",
                    callback_data=f"delete_session_{session_type}_{session_name}",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data=f"view_{session_type}_sessions"
                )
            ],
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("delete_session_"))
async def delete_session(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Å–µ—Å—Å–∏–∏ –∏ –∏–º—è —Å–µ—Å—Å–∏–∏
    parts = callback.data.replace("delete_session_", "").split("_", 1)
    session_type = parts[0]  # history –∏–ª–∏ realtime
    session_name = parts[1]

    if session_type == "history":
        session_path = f"client/sessions/history/{session_name}"
    else:
        session_path = f"client/sessions/realtime/{session_name}"

    try:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
        if os.path.exists(f"{session_path}.session"):
            os.remove(f"{session_path}.session")
        if os.path.exists(f"{session_path}.json"):
            os.remove(f"{session_path}.json")

        await callback.answer("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        await callback.message.edit_text(
            f"‚úÖ –°–µ—Å—Å–∏—è {session_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {session_type}",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Å–µ—Å—Å–∏–π",
                            callback_data=f"view_{session_type}_sessions",
                        )
                    ]
                ]
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏")
