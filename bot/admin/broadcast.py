from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from db.database import Database
from aiogram_album import AlbumMessage
from aiogram_album.ttl_cache_middleware import TTLCacheAlbumMiddleware

logger = logging.getLogger(__name__)

router = Router(name="admin_broadcast")
db = Database()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–æ–≤
TTLCacheAlbumMiddleware(router=router)


class AdminBroadcastStates(StatesGroup):
    waiting_for_broadcast = State()


@router.callback_query(F.data == "broadcast")
async def request_broadcast_message(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
    await state.set_state(AdminBroadcastStates.waiting_for_broadcast)
    await callback.message.answer(
        "üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥.)",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                    )
                ]
            ]
        ),
    )


@router.message(AdminBroadcastStates.waiting_for_broadcast, F.media_group_id)
async def process_broadcast_album(message: AlbumMessage, state: FSMContext):
    if not db.get_user(message.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
        )
        return

    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–ª—å–±–æ–º–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}")

    users = db.get_all_users()
    total_users = len(users)

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ InputMedia –æ–±—ä–µ–∫—Ç–æ–≤
    media_group = []
    for msg in message.messages:
        if msg.photo:
            media_group.append(
                types.InputMediaPhoto(
                    media=msg.photo[-1].file_id,
                    caption=msg.caption if msg.caption else None,
                )
            )
        elif msg.video:
            media_group.append(
                types.InputMediaVideo(
                    media=msg.video.file_id,
                    caption=msg.caption if msg.caption else None,
                )
            )
        elif msg.document:
            media_group.append(
                types.InputMediaDocument(
                    media=msg.document.file_id,
                    caption=msg.caption if msg.caption else None,
                )
            )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–ª—å–±–æ–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    first_message = message.messages[0]
    await first_message.answer(
        f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –∞–ª—å–±–æ–º–∞ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º..."
    )

    success_count = 0
    error_count = 0
    blocked_count = 0

    for user in users:
        try:
            await first_message.bot.send_media_group(
                chat_id=user.user_id, media=media_group
            )
            success_count += 1
            if not user.is_active:
                db.update_user_activity(user.user_id, True)
            logger.debug(f"–ê–ª—å–±–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")
        except Exception as e:
            error_count += 1
            if "bot was blocked by the user" in str(e):
                blocked_count += 1
                if user.is_active:
                    db.update_user_activity(user.user_id, False)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

    logger.info(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∞–ª—å–±–æ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_count}, –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫: {error_count - blocked_count}"
    )

    await first_message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∞–ª—å–±–æ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_count}\n"
        f"‚Ä¢ –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: {error_count - blocked_count}",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                    )
                ]
            ]
        ),
    )

    await state.clear()


@router.message(AdminBroadcastStates.waiting_for_broadcast)
async def process_broadcast(message: types.Message, state: FSMContext):
    if not db.get_user(message.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
        )
        return

    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}")

    users = db.get_all_users()
    total_users = len(users)

    await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")

    success_count = 0
    error_count = 0
    blocked_count = 0

    for user in users:
        try:
            await message.copy_to(user.user_id)
            success_count += 1
            if not user.is_active:
                db.update_user_activity(user.user_id, True)
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")
        except Exception as e:
            error_count += 1
            if "bot was blocked by the user" in str(e):
                blocked_count += 1
                if user.is_active:
                    db.update_user_activity(user.user_id, False)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

    logger.info(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_count}, –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫: {error_count - blocked_count}"
    )

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_count}\n"
        f"‚Ä¢ –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: {error_count - blocked_count}",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                    )
                ]
            ]
        ),
    )

    await state.clear()
