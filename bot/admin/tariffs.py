from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.database import Database
from bot.utils.states import AdminStates
from bot.utils.pagination import Paginator

router = Router()
db = Database()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
TARIFFS_PER_PAGE = 3


@router.callback_query(F.data == "tariffs_menu")
async def tariffs_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="create_tariff")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤", callback_data="list_tariffs")
    builder.button(text="üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="assign_tariff")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
    builder.adjust(2)

    await callback.message.edit_text(
        "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data == "create_tariff")
async def create_tariff_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    await state.set_state(AdminStates.waiting_tariff_name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
        .as_markup(),
    )


@router.message(AdminStates.waiting_tariff_name)
async def process_tariff_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    await state.update_data(tariff_name=message.text)
    await state.set_state(AdminStates.waiting_tariff_price)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö):",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
        .as_markup(),
    )


@router.message(AdminStates.waiting_tariff_price)
async def process_tariff_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
            .as_markup(),
        )
        return

    await state.update_data(tariff_price=price)
    await state.set_state(AdminStates.waiting_tariff_projects)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
        .as_markup(),
    )


@router.message(AdminStates.waiting_tariff_projects)
async def process_tariff_projects(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        projects = int(message.text)
        if projects <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
            .as_markup(),
        )
        return

    await state.update_data(tariff_projects=projects)
    await state.set_state(AdminStates.waiting_tariff_chats)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
        .as_markup(),
    )


@router.message(AdminStates.waiting_tariff_chats)
async def process_tariff_chats(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        chats = int(message.text)
        if chats <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Ç–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
            .as_markup(),
        )
        return

    data = await state.get_data()
    tariff = db.create_tariff_plan(
        name=data["tariff_name"],
        price=data["tariff_price"],
        max_projects=data["tariff_projects"],
        max_chats_per_project=chats,
    )

    await state.clear()
    await message.answer(
        f"‚úÖ –¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {tariff.name}\n"
        f"–¶–µ–Ω–∞: {tariff.price} –∫–æ–ø.\n"
        f"–ú–∞–∫—Å. –ø—Ä–æ–µ–∫—Ç–æ–≤: {tariff.max_projects}\n"
        f"–ú–∞–∫—Å. —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {tariff.max_chats_per_project}",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data="tariffs_menu")
        .as_markup(),
    )


@router.callback_query(F.data == "list_tariffs")
async def list_tariffs(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"""
    await state.update_data(tariffs_page=0)  # –ü–∞–≥–∏–Ω–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 0-based –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
    await show_tariffs_page(callback, state)


@router.callback_query(F.data.startswith("tariffs_page_"))
async def tariffs_page_navigation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ç–∞—Ä–∏—Ñ–æ–≤"""
    page = int(callback.data.split("_")[-1])
    await state.update_data(tariffs_page=page)
    await show_tariffs_page(callback, state)


async def show_tariffs_page(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∞—Ä–∏—Ñ–æ–≤"""
    data = await state.get_data()
    page = data.get("tariffs_page", 0)  # –ü–∞–≥–∏–Ω–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 0-based –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é

    tariffs = db.get_all_tariff_plans()

    if not tariffs:
        await callback.message.edit_text(
            "üìù –¢–∞—Ä–∏—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="tariffs_menu")
            .as_markup(),
        )
        return

    def tariff_callback(tariff) -> tuple[str, str]:
        return (
            f"ID: {tariff.id} | {tariff.name} | {tariff.price} –∫–æ–ø.",
            f"edit_tariff_{tariff.id}",
        )

    paginator = Paginator(
        items=tariffs,
        items_per_page=TARIFFS_PER_PAGE,
        callback_prefix="tariffs",
        item_callback=tariff_callback,
        return_callback="tariffs_menu",
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start_idx = page * TARIFFS_PER_PAGE
    end_idx = min(start_idx + TARIFFS_PER_PAGE, len(tariffs))

    text = f"üìù –°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{paginator.total_pages}):\n\n"

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞
    keyboard = paginator.get_page_keyboard(page)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.inline_keyboard.append(
        [
            InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="delete_tariff"
            ),
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="edit_tariff"
            ),
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data == "delete_tariff")
async def delete_tariff_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    await state.set_state(AdminStates.waiting_tariff_id_for_delete)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
        .as_markup(),
    )


@router.message(AdminStates.waiting_tariff_id_for_delete)
async def process_tariff_id_for_delete(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        tariff_id = int(message.text)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∞—Ä–∏—Ñ–∞:",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
            .as_markup(),
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
    tariff = db.get_tariff_plan(tariff_id)
    if not tariff:
        await message.answer(
            "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
            .as_markup(),
        )
        return

    # –£–¥–∞–ª—è–µ–º —Ç–∞—Ä–∏—Ñ
    success = db.delete_tariff_plan(tariff_id)
    if not success:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
            .as_markup(),
        )
        await state.clear()
        return

    await state.clear()
    await message.answer(
        f"‚úÖ –¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n" f"ID: {tariff_id}\n" f"–ù–∞–∑–≤–∞–Ω–∏–µ: {tariff.name}",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
        .as_markup(),
    )


@router.callback_query(F.data == "edit_tariff")
async def edit_tariff_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    await state.set_state(AdminStates.waiting_tariff_id_for_edit)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
        .as_markup(),
    )


@router.message(AdminStates.waiting_tariff_id_for_edit)
async def process_tariff_id_for_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        tariff_id = int(message.text)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∞—Ä–∏—Ñ–∞:",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
            .as_markup(),
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
    tariff = db.get_tariff_plan(tariff_id)
    if not tariff:
        await message.answer(
            "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
            .as_markup(),
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∞—Ä–∏—Ñ–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(edit_tariff_id=tariff_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_tariff_name")
    builder.button(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_tariff_price")
    builder.button(
        text="üìä –ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å. –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="edit_tariff_projects"
    )
    builder.button(text="üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å. —á–∞—Ç–æ–≤", callback_data="edit_tariff_chats")
    builder.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="edit_tariff_status")
    builder.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
    builder.adjust(2)

    await state.set_state(AdminStates.waiting_tariff_edit_option)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ç–∞—Ä–∏—Ñ–µ:\n\n"
        f"ID: {tariff.id}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {tariff.name}\n"
        f"–¶–µ–Ω–∞: {tariff.price} –∫–æ–ø.\n"
        f"–ú–∞–∫—Å. –ø—Ä–æ–µ–∫—Ç–æ–≤: {tariff.max_projects}\n"
        f"–ú–∞–∫—Å. —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {tariff.max_chats_per_project}\n"
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if tariff.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(
    F.data == "edit_tariff_name", AdminStates.waiting_tariff_edit_option
)
async def edit_tariff_name_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    await state.set_state(AdminStates.waiting_tariff_new_name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
        .as_markup(),
    )


@router.message(AdminStates.waiting_tariff_new_name)
async def process_tariff_new_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    data = await state.get_data()
    tariff_id = data["edit_tariff_id"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
    success = db.update_tariff_plan(tariff_id, name=message.text)
    if not success:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
            .as_markup(),
        )
        await state.clear()
        return

    await state.clear()
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n" f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {message.text}",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
        .as_markup(),
    )


@router.callback_query(
    F.data == "edit_tariff_price", AdminStates.waiting_tariff_edit_option
)
async def edit_tariff_price_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞"""
    await state.set_state(AdminStates.waiting_tariff_new_price)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö):",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
        .as_markup(),
    )


@router.message(AdminStates.waiting_tariff_new_price)
async def process_tariff_new_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
            .as_markup(),
        )
        return

    data = await state.get_data()
    tariff_id = data["edit_tariff_id"]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞
    success = db.update_tariff_plan(tariff_id, price=price)
    if not success:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
            .as_markup(),
        )
        await state.clear()
        return

    await state.clear()
    await message.answer(
        f"‚úÖ –¶–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n" f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price} –∫–æ–ø.",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
        .as_markup(),
    )


@router.callback_query(
    F.data == "edit_tariff_projects", AdminStates.waiting_tariff_edit_option
)
async def edit_tariff_projects_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ç–∞—Ä–∏—Ñ–∞"""
    await state.set_state(AdminStates.waiting_tariff_new_projects)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
        .as_markup(),
    )


@router.message(AdminStates.waiting_tariff_new_projects)
async def process_tariff_new_projects(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        projects = int(message.text)
        if projects <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
            .as_markup(),
        )
        return

    data = await state.get_data()
    tariff_id = data["edit_tariff_id"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ç–∞—Ä–∏—Ñ–∞
    success = db.update_tariff_plan(tariff_id, max_projects=projects)
    if not success:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ç–∞—Ä–∏—Ñ–∞.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
            .as_markup(),
        )
        await state.clear()
        return

    await state.clear()
    await message.answer(
        f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ç–∞—Ä–∏—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {projects}",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
        .as_markup(),
    )


@router.callback_query(
    F.data == "edit_tariff_chats", AdminStates.waiting_tariff_edit_option
)
async def edit_tariff_chats_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Ç–æ–≤ —Ç–∞—Ä–∏—Ñ–∞"""
    await state.set_state(AdminStates.waiting_tariff_new_chats)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
        .as_markup(),
    )


@router.message(AdminStates.waiting_tariff_new_chats)
async def process_tariff_new_chats(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Ç–æ–≤ —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        chats = int(message.text)
        if chats <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Ç–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="list_tariffs")
            .as_markup(),
        )
        return

    data = await state.get_data()
    tariff_id = data["edit_tariff_id"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ —Ç–∞—Ä–∏—Ñ–∞
    success = db.update_tariff_plan(tariff_id, max_chats_per_project=chats)
    if not success:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ —Ç–∞—Ä–∏—Ñ–∞.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
            .as_markup(),
        )
        await state.clear()
        return

    await state.clear()
    await message.answer(
        f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ —Ç–∞—Ä–∏—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {chats}",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
        .as_markup(),
    )


@router.callback_query(
    F.data == "edit_tariff_status", AdminStates.waiting_tariff_edit_option
)
async def edit_tariff_status(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    data = await state.get_data()
    tariff_id = data["edit_tariff_id"]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ
    tariff = db.get_tariff_plan(tariff_id)
    if not tariff:
        await callback.message.edit_text(
            "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
            .as_markup(),
        )
        await state.clear()
        return

    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    new_status = not tariff.is_active

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∞—Ä–∏—Ñ–∞
    success = db.update_tariff_plan(tariff_id, is_active=new_status)
    if not success:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∞—Ä–∏—Ñ–∞.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
            .as_markup(),
        )
        await state.clear()
        return

    await state.clear()
    await callback.message.edit_text(
        f"‚úÖ –°—Ç–∞—Ç—É—Å —Ç–∞—Ä–∏—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if new_status else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_tariffs")
        .as_markup(),
    )


@router.callback_query(F.data == "assign_tariff")
async def assign_tariff_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    await state.set_state(AdminStates.waiting_user_id)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
        .as_markup(),
    )


@router.message(AdminStates.waiting_user_id)
async def process_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
            .as_markup(),
        )
        return

    user = db.get_user(user_id)
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
            .as_markup(),
        )
        return

    await state.update_data(target_user_id=user_id)
    await state.set_state(AdminStates.waiting_tariff_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
    tariffs = db.get_all_tariff_plans(active_only=True)

    if not tariffs:
        await message.answer(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="tariffs_menu")
            .as_markup(),
        )
        await state.clear()
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ ID —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:\n\n"
    for tariff in tariffs:
        text += (
            f"ID: {tariff.id}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {tariff.name}\n"
            f"–¶–µ–Ω–∞: {tariff.price} –∫–æ–ø.\n"
            f"–ú–∞–∫—Å. –ø—Ä–æ–µ–∫—Ç–æ–≤: {tariff.max_projects}\n"
            f"–ú–∞–∫—Å. —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {tariff.max_chats_per_project}\n\n"
        )

    await message.answer(
        text,
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
        .as_markup(),
    )


@router.message(AdminStates.waiting_tariff_id)
async def process_tariff_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Ç–∞—Ä–∏—Ñ–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        tariff_id = int(message.text)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∞—Ä–∏—Ñ–∞:",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
            .as_markup(),
        )
        return

    data = await state.get_data()
    user_id = data["target_user_id"]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
    tariff = db.get_tariff_plan(tariff_id)
    if not tariff:
        await message.answer(
            "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariffs_menu")
            .as_markup(),
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="tariffs_menu")
            .as_markup(),
        )
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_tariff = db.get_user_tariff(user_id)
    if current_tariff:
        current_tariff_plan = db.get_tariff_plan(current_tariff.tariff_plan_id)
        await message.answer(
            f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {current_tariff_plan.name}\n"
            f"–û–Ω –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: {tariff.name}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=InlineKeyboardBuilder()
            .button(
                text="‚úÖ –î–∞",
                callback_data=f"confirm_admin_tariff_{user_id}_{tariff_id}",
            )
            .button(text="‚ùå –ù–µ—Ç", callback_data="tariffs_menu")
            .as_markup(),
        )
        await state.clear()
        return

    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_tariff = db.assign_tariff_to_user(user_id, tariff_id)
    if not user_tariff:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="tariffs_menu")
            .as_markup(),
        )
        await state.clear()
        return

    await state.clear()
    await message.answer(
        f"‚úÖ –¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name or user.username or user_id}\n"
        f"–¢–∞—Ä–∏—Ñ: {tariff.name}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_tariff.end_date.strftime('%d.%m.%Y')}",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data="tariffs_menu")
        .as_markup(),
    )


@router.callback_query(F.data.startswith("confirm_admin_tariff_"))
async def confirm_admin_tariff_assignment(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    _, user_id, tariff_id = callback.data.split("_")
    user_id = int(user_id)
    tariff_id = int(tariff_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∞—Ä–∏—Ñ
    user = db.get_user(user_id)
    tariff = db.get_tariff_plan(tariff_id)

    if not user or not tariff:
        await callback.message.edit_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="tariffs_menu")
            .as_markup(),
        )
        return

    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_tariff = db.assign_tariff_to_user(user_id, tariff_id)
    if not user_tariff:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="tariffs_menu")
            .as_markup(),
        )
        return

    await callback.message.edit_text(
        f"‚úÖ –¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name or user.username or user_id}\n"
        f"–¢–∞—Ä–∏—Ñ: {tariff.name}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_tariff.end_date.strftime('%d.%m.%Y')}",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data="tariffs_menu")
        .as_markup(),
    )


@router.callback_query(F.data == "tariffs_menu")
async def back_to_tariffs_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤"""
    await state.clear()
    await tariffs_menu(callback, state)


@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    await callback.answer()
