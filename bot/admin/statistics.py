from aiogram import Router, F, types
import re
import os
import time
import logging

from db.database import Database
from bot.utils.pagination import Paginator
from .users import AdminUserStates

logger = logging.getLogger(__name__)

router = Router(name="admin_statistics")
db = Database()


@router.callback_query(F.data == "viewcodes")
async def viewcodes(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    codes = db.get_all_referral_links_statistics()

    text = "üìä –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:"
    keyboard = [
        [
            types.InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="create_ref_link"
            )
        ]
    ]

    if not codes:
        keyboard.append(
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        )
        await callback.message.edit_text(
            text + "\n\nüì± –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
        )
        return

    def code_callback(code: dict) -> tuple[str, str]:
        return (
            f"üìä {code['code']} ({code['users_count']})",
            f"code_info_{code['code']}",
        )

    paginator = Paginator(
        items=codes,
        items_per_page=5,
        callback_prefix="codes",
        item_callback=code_callback,
        return_callback="back_to_admin",
    )

    keyboard = paginator.get_page_keyboard(0)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤ –Ω–∞—á–∞–ª–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard.inline_keyboard.insert(
        0,
        [
            types.InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="create_ref_link"
            )
        ],
    )

    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("codes_page_"))
async def handle_codes_page(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    page = int(callback.data.split("_")[-1])
    codes = db.get_all_referral_links_statistics()

    def code_callback(code: dict) -> tuple[str, str]:
        return (
            f"üìä {code['code']} ({code['users_count']})",
            f"code_info_{code['code']}",
        )

    paginator = Paginator(
        items=codes,
        items_per_page=5,
        callback_prefix="codes",
        item_callback=code_callback,
        return_callback="back_to_admin",
    )

    await callback.message.edit_text(
        "üìä –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:", reply_markup=paginator.get_page_keyboard(page)
    )


@router.callback_query(F.data.startswith("code_info_"))
async def show_code_info(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    code = callback.data.replace("code_info_", "")
    code_data = db.get_link_statistics(code)

    if not code_data:
        await callback.answer("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    bot_info = await callback.bot.get_me()
    bot_username = bot_info.username

    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {code}:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {code_data['users_count']}\n"
        f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {code_data['total_payments']} ‚ÇΩ\n\n"
        f"üîó –°—Å—ã–ª–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: https://t.me/{bot_username}?start={code_data['code']}"
    )

    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –º–µ—Ç–∫–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if code_data["users_count"] == 0:
        keyboard.append(
            [
                types.InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"delete_ref_link_{code}"
                )
            ]
        )

    keyboard.append(
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", callback_data="viewcodes")]
    )

    await callback.message.edit_text(
        text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data == "create_ref_link")
async def create_ref_link(callback: types.CallbackQuery, state):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    

    await state.set_state(AdminUserStates.waiting_for_ref_code)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: vk_com, telegram_ads):",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="viewcodes")]
            ]
        ),
    )


@router.message(
    F.text.regexp("^[a-zA-Z0-9_-]+$"), AdminUserStates.waiting_for_ref_code
)
async def process_ref_code(message: types.Message, state):
    if not db.get_user(message.from_user.id).is_admin:
        return

    code = message.text.strip()
    if not code:
        await message.answer("‚ùå –ú–µ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–ª—è URL —Å–∏–º–≤–æ–ª—ã
    if not re.match("^[a-zA-Z0-9_-]+$", code):
        await message.answer(
            "‚ùå –ú–µ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ"
        )
        return

    ref_link = db.create_referral_link(code)
    bot_info = await message.bot.get_me()
    bot_username = bot_info.username

    await message.answer(
        f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üîó https://t.me/{bot_username}?start={ref_link.code}\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å—Ç–æ—á–Ω–∏–∫–∏'",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üìä –ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", callback_data="viewcodes"
                    )
                ]
            ]
        ),
    )
    await state.clear()


@router.callback_query(F.data.startswith("delete_ref_link_"))
async def delete_ref_link(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    code = callback.data.replace("delete_ref_link_", "")

    if db.delete_referral_link(code):
        await callback.answer("‚úÖ –ú–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        await viewcodes(callback)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É")


@router.callback_query(F.data == "export_payments")
async def export_payments(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"
    )

    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        filename = f"payments_history_{int(time.time())}.csv"

        with open(filename, "w", encoding="utf-8-sig") as f:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            f.write("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;–°—É–º–º–∞;–î–∞—Ç–∞\n")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
            payments = db.get_all_payments()
            for payment in payments:
                f.write(f"{payment.user_id};{payment.amount};{payment.created_at}\n")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            types.FSInputFile(filename, filename=filename),
            caption="‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤—ã–≥—Ä—É–∂–µ–Ω–∞!",
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)

        logger.info("–í—ã–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                        )
                    ]
                ]
            ),
        )
