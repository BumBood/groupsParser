from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from db.database import Database
from bot.utils.pagination import Paginator

logger = logging.getLogger(__name__)

router = Router(name="admin_transfer")
db = Database()


class AdminTransferStates(StatesGroup):
    waiting_for_source_user = State()
    waiting_for_target_user = State()
    waiting_for_confirmation = State()


@router.callback_query(F.data == "transfer_tasks")
async def start_transfer(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–Ω–æ—Å—É –∑–∞–¥–∞—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–¥–∞—á")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    users = db.get_all_users()

    def user_callback(user) -> tuple[str, str]:
        projects_count = len(db.get_user_projects(user.user_id))
        return (
            f"{'üëë ' if user.is_admin else ''}ID: {user.user_id} | "
            f"{user.username or user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} "
            f"(–ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_count})",
            f"select_source_{user.user_id}",
        )

    paginator = Paginator(
        items=users,
        items_per_page=8,
        callback_prefix="source_users",
        item_callback=user_callback,
        return_callback="back_to_admin",
    )

    await callback.message.edit_text(
        "üîÑ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ—Ç –∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏):",
        reply_markup=paginator.get_page_keyboard(0),
    )


@router.callback_query(F.data.startswith("source_users_page_"))
async def handle_source_users_page(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    page = int(callback.data.split("_")[-1])
    users = db.get_all_users()

    def user_callback(user) -> tuple[str, str]:
        projects_count = len(db.get_user_projects(user.user_id))
        return (
            f"{'üëë ' if user.is_admin else ''}ID: {user.user_id} | "
            f"{user.username or user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} "
            f"(–ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_count})",
            f"select_source_{user.user_id}",
        )

    paginator = Paginator(
        items=users,
        items_per_page=8,
        callback_prefix="source_users",
        item_callback=user_callback,
        return_callback="back_to_admin",
    )

    await callback.message.edit_text(
        "üîÑ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ—Ç –∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏):",
        reply_markup=paginator.get_page_keyboard(page),
    )


@router.callback_query(F.data.startswith("select_source_"))
async def select_source_user(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    source_user_id = int(callback.data.replace("select_source_", ""))
    source_user = db.get_user(source_user_id)

    if not source_user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
    await state.update_data(source_user_id=source_user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–µ–∫—Ç—ã
    user_projects = db.get_user_projects(source_user_id)
    if not user_projects:
        await callback.answer("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
        await callback.message.edit_text(
            f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {source_user.username or source_user.full_name or source_user_id} –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="transfer_tasks"
                        )
                    ]
                ]
            ),
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    users = db.get_all_users()
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    users = [u for u in users if u.user_id != source_user_id]

    def user_callback(user) -> tuple[str, str]:
        projects_count = len(db.get_user_projects(user.user_id))
        return (
            f"{'üëë ' if user.is_admin else ''}ID: {user.user_id} | "
            f"{user.username or user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} "
            f"(–ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_count})",
            f"select_target_{user.user_id}",
        )

    paginator = Paginator(
        items=users,
        items_per_page=8,
        callback_prefix="target_users",
        item_callback=user_callback,
        return_callback="transfer_tasks",
    )

    await callback.message.edit_text(
        f"üîÑ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á\n\n"
        f"–í—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {source_user.username or source_user.full_name or source_user_id}\n"
        f"–ü—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞: {len(user_projects)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∫–æ–º—É –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏):",
        reply_markup=paginator.get_page_keyboard(0),
    )


@router.callback_query(F.data.startswith("target_users_page_"))
async def handle_target_users_page(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    data = await state.get_data()
    source_user_id = data.get("source_user_id")
    source_user = db.get_user(source_user_id)
    user_projects = db.get_user_projects(source_user_id)

    page = int(callback.data.split("_")[-1])
    users = db.get_all_users()
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    users = [u for u in users if u.user_id != source_user_id]

    def user_callback(user) -> tuple[str, str]:
        projects_count = len(db.get_user_projects(user.user_id))
        return (
            f"{'üëë ' if user.is_admin else ''}ID: {user.user_id} | "
            f"{user.username or user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} "
            f"(–ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_count})",
            f"select_target_{user.user_id}",
        )

    paginator = Paginator(
        items=users,
        items_per_page=8,
        callback_prefix="target_users",
        item_callback=user_callback,
        return_callback="transfer_tasks",
    )

    await callback.message.edit_text(
        f"üîÑ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á\n\n"
        f"–í—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {source_user.username or source_user.full_name or source_user_id}\n"
        f"–ü—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞: {len(user_projects)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∫–æ–º—É –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏):",
        reply_markup=paginator.get_page_keyboard(page),
    )


@router.callback_query(F.data.startswith("select_target_"))
async def select_target_user(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    data = await state.get_data()
    source_user_id = data.get("source_user_id")
    source_user = db.get_user(source_user_id)

    target_user_id = int(callback.data.replace("select_target_", ""))
    target_user = db.get_user(target_user_id)

    if not target_user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await state.update_data(target_user_id=target_user_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
    source_projects = db.get_user_projects(source_user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    projects_text = "\n".join(
        f"‚Ä¢ {project.name} (ID: {project.id})" for project in source_projects[:5]
    )

    if len(source_projects) > 5:
        projects_text += f"\n... –∏ –µ—â–µ {len(source_projects) - 5} –ø—Ä–æ–µ–∫—Ç–æ–≤"

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å", callback_data="confirm_transfer"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞", callback_data="transfer_tasks"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="back_to_admin"
                )
            ],
        ]
    )

    await callback.message.edit_text(
        f"üîÑ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n"
        f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {source_user.username or source_user.full_name or source_user_id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {target_user.username or target_user.full_name or target_user_id}\n\n"
        f"–ë—É–¥—É—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:\n{projects_text}\n\n"
        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –±—É–¥—É—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—é. "
        f"–ü—Ä–æ–µ–∫—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
        reply_markup=keyboard,
    )

    await state.set_state(AdminTransferStates.waiting_for_confirmation)


@router.callback_query(F.data == "confirm_transfer")
async def confirm_transfer(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    data = await state.get_data()
    source_user_id = data.get("source_user_id")
    target_user_id = data.get("target_user_id")

    if not source_user_id or not target_user_id:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        await state.clear()
        return

    source_user = db.get_user(source_user_id)
    target_user = db.get_user(target_user_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_projects = db.get_user_projects(source_user_id)

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        projects_copied = 0
        chats_copied = 0

        # –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –∏ –µ–≥–æ —á–∞—Ç—ã
        for project in source_projects:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
            project_chats = db.get_project_chats(project.id)

            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_project = db.create_project(
                user_id=target_user_id,
                name=project.name,
                description=project.description,
                is_active=True,  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç —Å—Ä–∞–∑—É
            )
            projects_copied += 1

            # –ö–æ–ø–∏—Ä—É–µ–º —á–∞—Ç—ã –∫ –Ω–æ–≤–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
            for chat in project_chats:
                db.create_project_chat(
                    project_id=new_project.id,
                    user_id=target_user_id,
                    name=chat.name,
                    chat_id=chat.chat_id,
                    access_hash=chat.access_hash,
                    is_active=True,  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç —Å—Ä–∞–∑—É
                )
                chats_copied += 1

        logger.info(
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {source_user_id} "
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_copied}, —á–∞—Ç–æ–≤: {chats_copied}"
        )

        await callback.message.edit_text(
            f"‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω\n\n"
            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {source_user.username or source_user.full_name or source_user_id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {target_user.username or target_user.full_name or target_user_id}\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_copied}\n"
            f"‚Ä¢ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —á–∞—Ç–æ–≤: {chats_copied}\n\n"
            f"–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —á–∞—Ç—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="back_to_admin"
                        )
                    ]
                ]
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–¥–∞—á: {e}")
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–¥–∞—á:\n{str(e)}",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                        )
                    ]
                ]
            ),
        )

    finally:
        await state.clear()
