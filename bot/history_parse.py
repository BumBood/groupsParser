import logging
import os
import asyncio
from datetime import datetime
from typing import Optional
from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from db.database import Database
from client.history_parser import HistoryParser
from bot.projects_keyboards import (
    parse_history_keyboard,
    cancel_keyboard,
    main_projects_keyboard,
)
from bot.utils.states import HistoryParseStates
from config.parameters_manager import ParametersManager

router = Router(name="history_parse")
db = Database()
history_parser = HistoryParser()

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
RESULTS_DIR = "parse_results"
os.makedirs(RESULTS_DIR, exist_ok=True)


# –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
def get_parse_cost():
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        return int(ParametersManager.get_parameter("history_parse_cost"))
    except (KeyError, ValueError):
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 100


# –í—Ö–æ–¥ –≤ –º–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏
@router.callback_query(F.data == "parse_history")
async def parse_history_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    await state.clear()

    user = db.get_user(callback.from_user.id)
    parse_cost = get_parse_cost()

    await callback.message.edit_text(
        "üì• <b>–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ª—é–±–æ–≥–æ —á–∞—Ç–∞, "
        "–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —á–µ—Ä–µ–∑ –Ω–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏.\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: <b>{parse_cost}‚ÇΩ</b>\n"
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user.balance}‚ÇΩ</b>",
        reply_markup=parse_history_keyboard(),
        parse_mode="HTML",
    )


# –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏
@router.callback_query(F.data == "start_parse_history")
async def start_parse_history(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    user = db.get_user(callback.from_user.id)
    parse_cost = get_parse_cost()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.balance < parse_cost:
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ({parse_cost}‚ÇΩ)",
                        callback_data=f"deposit_{parse_cost}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data="parse_history"
                    )
                ],
            ]
        )

        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
            f"–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <b>{parse_cost}‚ÇΩ</b>\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user.balance}‚ÇΩ</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            reply_markup=keyboard,
            parse_mode="HTML",
        )
        return

    await state.set_state(HistoryParseStates.enter_chat_id)

    await callback.message.edit_text(
        "üì• <b>–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: @channel_name –∏–ª–∏ -1001234567890</i>",
        reply_markup=cancel_keyboard("parse_history"),
        parse_mode="HTML",
    )


# –í–≤–æ–¥ ID —á–∞—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
@router.message(HistoryParseStates.enter_chat_id)
async def enter_chat_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ID —á–∞—Ç–∞"""
    chat_id = message.text.strip()

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if not (chat_id.startswith("@") or chat_id.startswith("-100") or chat_id.isdigit()):
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.\n\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: @channel_name –∏–ª–∏ -1001234567890</i>",
            parse_mode="HTML",
        )
        return

    await state.update_data(chat_id=chat_id)
    await state.set_state(HistoryParseStates.enter_limit)

    await message.answer(
        f"üì• <b>–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        f"ID —á–∞—Ç–∞: <code>{chat_id}</code>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ "
        f"–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.\n\n"
        f"<i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Ä–∞–∑—É–º–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000-5000), "
        f"–∏–Ω–∞—á–µ –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.</i>",
        reply_markup=cancel_keyboard("parse_history"),
        parse_mode="HTML",
    )


# –í–≤–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(HistoryParseStates.enter_limit)
async def enter_limit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        limit = int(message.text.strip())
        if limit < 0:
            raise ValueError("Limit must be non-negative")

        limit = None if limit == 0 else limit
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ 0.")
        return

    await state.update_data(limit=limit)
    await state.set_state(HistoryParseStates.enter_keywords)

    limit_text = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" if limit is None else str(limit)

    await message.answer(
        f"üì• <b>–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {limit_text}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) "
        f"–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=cancel_keyboard("parse_history"),
        parse_mode="HTML",
    )


# –í–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
@router.message(HistoryParseStates.enter_keywords)
async def enter_keywords_and_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    keywords = None if message.text == "-" else message.text

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    chat_id = data.get("chat_id")
    limit = data.get("limit")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–∞
    user = db.get_user(message.from_user.id)
    parse_cost = get_parse_cost()

    if user.balance < parse_cost:
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ({parse_cost}‚ÇΩ)",
                        callback_data=f"deposit_{parse_cost}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data="parse_history"
                    )
                ],
            ]
        )

        await message.answer(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
            f"–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <b>{parse_cost}‚ÇΩ</b>\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user.balance}‚ÇΩ</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            reply_markup=keyboard,
            parse_mode="HTML",
        )
        await state.clear()
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_balance(message.from_user.id, -parse_cost)
    logging.info(
        f"–°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏: {parse_cost}‚ÇΩ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}"
    )

    await state.set_state(HistoryParseStates.parsing)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    status_message = await message.answer(
        f"üîÑ <b>–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥...</b>\n\n"
        f"ID —á–∞—Ç–∞: <code>{chat_id}</code>\n"
        f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {limit if limit is not None else '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}\n"
        f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords or '–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'}\n\n"
        f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {parse_cost}‚ÇΩ\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%",
        parse_mode="HTML",
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    result = None
    try:
        async for progress, data in history_parser.parse_history(
            chat_id=chat_id, limit=limit, keywords=keywords
        ):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∫–∞–∂–¥—ã–µ 10%
            if progress % 10 == 0 or progress == 100:
                try:
                    await status_message.edit_text(
                        f"üîÑ <b>–ò–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥...</b>\n\n"
                        f"ID —á–∞—Ç–∞: <code>{chat_id}</code>\n"
                        f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {limit if limit is not None else '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}\n"
                        f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords or '–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'}\n\n"
                        f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {parse_cost}‚ÇΩ\n"
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%",
                        parse_mode="HTML",
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: {e}")

            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if progress == 100 and data:
                result = data

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await status_message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏—Å—Ç–æ—Ä–∏–∏</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
            f"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.",
            reply_markup=parse_history_keyboard(),
            parse_mode="HTML",
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        db.update_balance(message.from_user.id, parse_cost)
        logging.info(
            f"–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {parse_cost}‚ÇΩ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}"
        )
        await state.clear()
        return

    # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
    if result:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        user_id = message.from_user.id

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        user_dir = os.path.join(RESULTS_DIR, str(user_id))
        os.makedirs(user_dir, exist_ok=True)

        filename = os.path.join(
            user_dir, f"parse_{chat_id.replace('@', '')}_{timestamp}.xlsx"
        )

        try:
            history_parser.save_to_excel(result, filename)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(filename, "rb") as file:
                await message.answer_document(
                    types.BufferedInputFile(
                        file.read(), filename=os.path.basename(filename)
                    ),
                    caption=f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞</b>\n\n"
                    f"–ß–∞—Ç: <code>{chat_id}</code>\n"
                    f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'][0]['–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π']}\n"
                    f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {result['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'][0]['–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ']}\n"
                    f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords or '–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'}",
                    parse_mode="HTML",
                )

            await status_message.edit_text(
                f"‚úÖ <b>–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"ID —á–∞—Ç–∞: <code>{chat_id}</code>\n"
                f"–°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(result['–°–æ–æ–±—â–µ–Ω–∏—è'])}\n"
                f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {parse_cost}‚ÇΩ\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª–æ–º Excel.",
                reply_markup=parse_history_keyboard(),
                parse_mode="HTML",
            )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            await status_message.edit_text(
                f"‚ö†Ô∏è <b>–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏</b>\n\n"
                f"–û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=parse_history_keyboard(),
                parse_mode="HTML",
            )
    else:
        await status_message.edit_text(
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥</b>\n\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –∏–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
            f"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.",
            reply_markup=parse_history_keyboard(),
            parse_mode="HTML",
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏
        db.update_balance(message.from_user.id, parse_cost)
        logging.info(
            f"–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–∏: {parse_cost}‚ÇΩ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}"
        )

    await state.clear()
