import copy
import logging
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from config.parameters_manager import ParametersManager
from db.database import Database
from bot.keyboards import start_keyboard

router = Router(name="check_channels")
db = Database()


async def check_subscription(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã"""
    required_channels = ParametersManager.get_parameter("required_channels")
    if not required_channels:
        return True

    channel_ids = [channel.strip() for channel in required_channels.split(",")]

    for channel_id in channel_ids:
        try:
            chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if chat_member.status not in ["member", "administrator", "creator"]:
                return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            return False

    return True


async def get_subscription_keyboard(bot: Bot) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    required_channels = ParametersManager.get_parameter("required_channels")
    if not required_channels:
        return None

    channel_ids = [channel.strip() for channel in required_channels.split(",")]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])

    for channel_id in channel_ids:
        try:
            chat = await bot.get_chat(chat_id=channel_id)
            keyboard.inline_keyboard.append(
                [
                    types.InlineKeyboardButton(
                        text=f"üì¢ {chat.title}",
                        url=(
                            f"https://t.me/{chat.username}"
                            if chat.username
                            else f"https://t.me/c/{channel_id[4:]}"
                        ),
                    )
                ]
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")

    keyboard.inline_keyboard.append(
        [
            types.InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"
            )
        ]
    )

    return keyboard


@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    is_subscribed = await check_subscription(callback.bot, callback.from_user.id)

    if is_subscribed:
        await callback.message.edit_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=None,
        )

        user = db.get_user(callback.from_user.id)

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        if not db.get_user_tariff_info(callback.from_user.id)["has_tariff"]:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 3 –¥–Ω—è)
            db.assign_tariff_to_user(
                user_id=callback.from_user.id,
                tariff_id=1,  # ID –ø—Ä–æ–±–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
                duration_days=3
            )
            await callback.message.answer("üéâ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –¥–Ω—è!")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tariff_info = db.get_user_tariff_info(callback.from_user.id)

        keyboard = copy.deepcopy(start_keyboard)
        if user.is_admin:
            keyboard.inline_keyboard.append(
                [
                    types.InlineKeyboardButton(
                        text="üëë –ê–¥–º–∏–Ω–∫–∞", callback_data="back_to_admin"
                    )
                ]
            )
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}!\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} ‚ÇΩ\n–í–∞—à ID: <code>{callback.from_user.id}</code>"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        if tariff_info["has_tariff"]:
            message_text += (
                f"\n\nüìä –í–∞—à —Ç–∞—Ä–∏—Ñ: {tariff_info['tariff_name']}\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {tariff_info['end_date']}\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {tariff_info['days_left']}\n"
                f"üìÅ –ü—Ä–æ–µ–∫—Ç—ã: {tariff_info['current_projects']}/{tariff_info['max_projects']}\n"
                f"üí¨ –ß–∞—Ç—ã: {tariff_info['current_chats']}/{tariff_info['max_chats_per_project'] * tariff_info['max_projects']}"
            )
        else:
            message_text += "\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"

        await callback.message.answer(
            text=message_text,
            reply_markup=keyboard,
            parse_mode="HTML",
        )

        return True
    else:
        keyboard = await get_subscription_keyboard(callback.bot)
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.",
            reply_markup=keyboard,
        )
        return False
