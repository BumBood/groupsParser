import json
import hashlib
import logging
import requests
import uuid
from typing import Dict, Optional, List, Any
from aiogram import Bot
from aiogram.types import LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from config.parameters_manager import ParametersManager


class FreeKassa:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π FreeKassa"""

    def __init__(self, shop_id: int, secret_word_1: str, secret_word_2: str):
        self.shop_id = shop_id
        self.secret_word_1 = secret_word_1
        self.secret_word_2 = secret_word_2
        self.logger = logging.getLogger(__name__)

    def generate_payment_url(self, amount: float, order_id: str) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ SCI"""
        sign = hashlib.md5(
            f"{self.shop_id}:{amount}:{self.secret_word_1}:RUB:{order_id}".encode()
        ).hexdigest()

        link = f"https://pay.fk.money/?m={self.shop_id}&oa={amount}&currency=RUB&o={order_id}&s={sign}"
        self.logger.debug(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É FreeKassa: {link}")

        if requests.get(link).status_code != 200:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É: {link}")
            return None

        return link

    def check_payment_signature(
        self, merchant_id: str, amount: str, order_id: str, sign: str
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ"""
        expected_sign = hashlib.md5(
            f"{merchant_id}:{amount}:{self.secret_word_2}:{order_id}".encode()
        ).hexdigest()

        status = sign.lower() == expected_sign.lower()

        if not status:
            self.logger.error(
                f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {sign} != {expected_sign}. –î–∞–Ω–Ω—ã–µ: {merchant_id}, {amount}, {order_id}"
            )

        return status


class YooKassa:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ÆKassa —á–µ—Ä–µ–∑ Telegram Invoice"""

    def __init__(self, provider_token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ÆKassa

        :param provider_token: –ü–ª–∞—Ç–µ–∂–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç –ÆKassa –¥–ª—è Telegram
        """
        self.provider_token = provider_token
        self.logger = logging.getLogger(__name__)

    async def create_invoice(
        self,
        bot: Bot,
        chat_id: int,
        title: str,
        description: str,
        payload: str,
        currency: str,
        prices: List[LabeledPrice],
        amount: int,
    ) -> Optional[bool]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å –ø–æ–º–æ—â—å—é Telegram Invoice

        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—á–µ—Ç–∞
        :param description: –û–ø–∏—Å–∞–Ω–∏–µ —Å—á–µ—Ç–∞
        :param payload: –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        :param currency: –í–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB)
        :param prices: –°–ø–∏—Å–æ–∫ —Ü–µ–Ω —Å –º–µ—Ç–∫–∞–º–∏, –µ—Å–ª–∏ amount –Ω–µ —É–∫–∞–∑–∞–Ω
        :param amount: –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã prices
        :return: True, –µ—Å–ª–∏ —Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –∏–Ω–∞—á–µ False
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if not payload:
                payload = f"payment_{uuid.uuid4().hex}"

            provider_data = {
                "receipt": {
                    "items": [
                        {
                            "description": title,
                            "quantity": 1,
                            "amount": {"value": amount, "currency": currency},
                            "vat_code": 1,
                            "payment_mode" : "full_payment",
                            "payment_subject" : "commodity"
                        }
                    ]
                }
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç
            await bot.send_invoice(
                chat_id=chat_id,
                title=title,
                description=description,
                payload=payload,
                provider_token=self.provider_token,
                currency=currency,
                prices=prices,
                need_email=True,
                send_email_to_provider=True,
                provider_data=json.dumps(provider_data),
            )
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –ÆKassa: {e}")
            return False

    def parse_invoice_payload(self, payload: str) -> Dict:
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ payload –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ

        :param payload: –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
        :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
        """
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º payload –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ
            parts = payload.split("_")
            if len(parts) >= 2:
                return {
                    "type": parts[0],
                    "order_id": parts[1] if len(parts) > 1 else None,
                    "user_id": parts[2] if len(parts) > 2 else None,
                }
            return {"type": "unknown", "order_id": None, "user_id": None}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ payload: {e}")
            return {"type": "error", "order_id": None, "user_id": None}


class PaymentSystems:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏"""

    def __init__(self):
        self.yookassa = YooKassa(
            provider_token=ParametersManager.get_parameter("yookassa_provider_token")
        )
        self.freekassa = FreeKassa(
            shop_id=ParametersManager.get_parameter("shop_id"),
            secret_word_1=ParametersManager.get_parameter("secret_word_1"),
            secret_word_2=ParametersManager.get_parameter("secret_word_2"),
        )
        self.logger = logging.getLogger(__name__)

    def get_payment_methods_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí≥ –ÆKassa (–≤ Telegram)", callback_data="payment_yookassa"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üí≥ FreeKassa", callback_data="payment_freekassa"
                    )
                ],
            ]
        )
        return keyboard

    async def create_yookassa_invoice(
        self,
        bot: Bot,
        chat_id: int,
        title: str,
        description: str,
        payload: str,
        amount: int,
    ) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ÆKassa"""
        try:
            amount_kopeks = int(amount * 100)
            prices = [LabeledPrice(label=title, amount=amount_kopeks)]
            currency = "RUB"

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
            return await self.yookassa.create_invoice(
                bot=bot,
                chat_id=chat_id,
                title=title,
                description=description,
                payload=payload,
                currency=currency,
                prices=prices,
                amount=amount,
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –ÆKassa: {e}")
            return False

    def create_freekassa_payment(self, amount: float, order_id: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ FreeKassa"""
        try:
            return self.freekassa.generate_payment_url(amount, order_id)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ FreeKassa: {e}")
            return None

    def verify_freekassa_payment(
        self, merchant_id: str, amount: str, order_id: str, sign: str
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ FreeKassa"""
        try:
            return self.freekassa.check_payment_signature(
                merchant_id=merchant_id, amount=amount, order_id=order_id, sign=sign
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ FreeKassa: {e}")
            return False

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    async def process_payment(
        self,
        bot: Bot,
        user_id: int,
        amount: float,
        title: str,
        description: str,
        payload: str,
        payment_method: str = "yookassa",
    ) -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã

        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ä—É–±–ª—è—Ö
        :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–∞—Ç–µ–∂–∞
        :param description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        :param payload: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
        :param payment_method: –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã ("yookassa" –∏–ª–∏ "freekassa")
        :return: True, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω
        """
        try:
            self.logger.info(
                f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {payment_method}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, —Å—É–º–º–∞: {amount}‚ÇΩ"
            )

            if payment_method == "yookassa":
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
                success = await self.create_yookassa_invoice(
                    bot=bot,
                    chat_id=user_id,
                    title=title,
                    description=description,
                    payload=payload,
                    amount=int(amount),
                )
                return success

            elif payment_method == "freekassa":
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ FreeKassa
                payment_url = self.create_freekassa_payment(
                    amount=amount, order_id=payload
                )

                if payment_url:
                    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                            [
                                InlineKeyboardButton(
                                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment"
                                )
                            ],
                        ]
                    )

                    await bot.send_message(
                        user_id,
                        f"üí∞ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω\n"
                        f"ID –ø–ª–∞—Ç–µ–∂–∞: {payload}\n\n"
                        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª\n"
                        "2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n"
                        "3. –î–µ–Ω—å–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å\n\n"
                        f"–ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}",
                        reply_markup=keyboard,
                    )
                    return True
                return False

            else:
                self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}")
                return False

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–ª–∞—Ç–µ–∂–µ–π
    async def process_successful_payment(self, payment: Any, bot: Bot) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç Telegram Payments API

        :param payment: –û–±—ä–µ–∫—Ç payment –∏–∑ successful_payment —Ö–µ–Ω–¥–ª–µ—Ä–∞
        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        :return: True, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        """
        try:
            from bot.utils.funcs import add_balance_with_notification, error_notify
            from db.database import Database

            db = Database()

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
            self.logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {payment.telegram_payment_charge_id}")
            self.logger.info(f"–°—É–º–º–∞: {payment.total_amount} {payment.currency}")
            self.logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {payment.invoice_payload}")

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payload = payment.invoice_payload
            amount = payment.total_amount / 100  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π
            if payload.startswith("deposit_"):
                # –ü–ª–∞—Ç–µ–∂ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                user_id = int(payload.split("_")[1])
                await add_balance_with_notification(user_id, amount, bot)
                return True

            elif payload.startswith("tariff_"):
                # –ü–ª–∞—Ç–µ–∂ –∑–∞ —Ç–∞—Ä–∏—Ñ
                parts = payload.split("_")
                if len(parts) >= 3:
                    user_id = int(parts[1])
                    tariff_id = int(parts[2])

                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_tariff = db.assign_tariff_to_user(user_id, tariff_id)

                    if user_tariff:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                        tariff = db.get_tariff_plan(tariff_id)
                        await error_notify(
                            bot,
                            f"üí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞!\n\n"
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                            f"–¢–∞—Ä–∏—Ñ: {tariff.name}\n"
                            f"–°—É–º–º–∞: {amount}‚ÇΩ\n"
                            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_tariff.end_date.strftime('%d.%m.%Y')}",
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª —Ç–∞—Ä–∏—Ñ {tariff.name}",
                            user_id,
                        )
                        return True

            return False

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False

    async def process_freekassa_webhook(self, data: Dict) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –æ—Ç FreeKassa

        :param data: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç FreeKassa
        :return: True, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        """
        try:
            from bot.utils.funcs import add_balance_with_notification, error_notify
            from db.database import Database
            from aiogram import Bot
            from aiogram.client.default import DefaultBotProperties

            db = Database()
            bot = Bot(
                token=ParametersManager.get_parameter("bot_token"),
                default=DefaultBotProperties(parse_mode="HTML"),
            )

            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            merchant_id = data.get("MERCHANT_ID")
            amount = data.get("AMOUNT")
            order_id = data.get("MERCHANT_ORDER_ID")
            sign = data.get("SIGN")

            if not all([merchant_id, amount, order_id, sign]):
                self.logger.error(
                    f"Missing required parameters: {merchant_id}, {amount}, {order_id}, {sign}"
                )
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞
            if not self.verify_freekassa_payment(merchant_id, amount, order_id, sign):
                self.logger.error(f"Invalid signature: {sign}")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –ø–æ order_id
            if order_id.startswith("tariff_"):
                # –ü–ª–∞—Ç–µ–∂ –∑–∞ —Ç–∞—Ä–∏—Ñ
                _, user_id, tariff_id, _ = order_id.split("_")
                user_id = int(user_id)
                tariff_id = int(tariff_id)

                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_tariff = db.assign_tariff_to_user(user_id, tariff_id)
                if not user_tariff:
                    await error_notify(
                        bot,
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}",
                        f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ {tariff_id}",
                        user_id,
                    )
                    return False

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                tariff = db.get_tariff_plan(tariff_id)
                current_tariff = db.get_user_tariff(user_id)
                if current_tariff and current_tariff.tariff_plan_id != tariff_id:
                    current_tariff_plan = db.get_tariff_plan(
                        current_tariff.tariff_plan_id
                    )
                    await bot.send_message(
                        user_id,
                        f"‚úÖ –¢–∞—Ä–∏—Ñ {tariff.name} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                        f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞—Ä–∏—Ñ {current_tariff_plan.name} –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω.\n"
                        f"–ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_tariff.end_date.strftime('%d.%m.%Y')}",
                    )
                else:
                    await bot.send_message(
                        user_id,
                        f"‚úÖ –¢–∞—Ä–∏—Ñ {tariff.name} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_tariff.end_date.strftime('%d.%m.%Y')}",
                    )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                await error_notify(
                    bot,
                    f"üí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ —á–µ—Ä–µ–∑ FreeKassa!\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                    f"–¢–∞—Ä–∏—Ñ: {tariff.name}\n"
                    f"–°—É–º–º–∞: {amount}‚ÇΩ\n"
                    f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_tariff.end_date.strftime('%d.%m.%Y')}",
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª —Ç–∞—Ä–∏—Ñ {tariff.name} —á–µ—Ä–µ–∑ FreeKassa",
                    user_id,
                )
            else:
                # –û–±—ã—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                # –§–æ—Ä–º–∞—Ç: <user_id>_<timestamp>
                user_id = int(order_id.split("_")[0])
                await add_balance_with_notification(user_id, float(amount), bot)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.logger.info(
                    f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ —á–µ—Ä–µ–∑ FreeKassa"
                )

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")
            return False
