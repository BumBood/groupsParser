import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from db.database import Database
from typing import Optional, List, Dict, Set, Tuple

logger = logging.getLogger(__name__)


class TariffChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self, bot: Bot, db: Database):
        self.bot = bot
        self.db = db
        self.running = False
        self.task = None
        self.message_processor = None
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        # user_id -> set(notification_types)
        self.notifications_sent: Dict[int, Set[str]] = {}
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
        # user_id -> datetime
        self.tariff_expired_times: Dict[int, datetime] = {}
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (30 –º–∏–Ω—É—Ç)
        self.check_interval = 30 * 60
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (24 —á–∞—Å–∞)
        self.reset_notifications_interval = 24 * 60 * 60

    async def start(self, message_processor=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤"""
        if self.running:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤")
            return

        self.message_processor = message_processor
        self.running = True
        self.task = asyncio.create_task(self._check_loop())
        logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤"""
        if not self.running:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ –∑–∞–ø—É—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤")
            return

        self.running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        logger.info("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        self.notifications_sent.clear()
        self.tariff_expired_times.clear()

    async def _check_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤"""
        last_reset_time = asyncio.get_event_loop().time()

        while self.running:
            try:
                current_time = asyncio.get_event_loop().time()

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
                if current_time - last_reset_time >= self.reset_notifications_interval:
                    self.notifications_sent.clear()
                    last_reset_time = current_time
                    logger.info("–û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–∞—Ä–∏—Ñ–∞—Ö")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ—ã
                await self._check_expiring_tariffs()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(self.check_interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤: {str(e)}")
                await asyncio.sleep(
                    300
                )  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    async def _check_expiring_tariffs(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        now = datetime.now()
        one_day_ahead = now + timedelta(days=1)
        one_hour_ahead = now + timedelta(hours=1)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
        active_tariffs = self.db.get_all_active_user_tariffs()
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {len(active_tariffs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–ª–∏ 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        inactive_tariffs = self.db.get_inactive_user_tariffs()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        for user_id, expired_time in list(self.tariff_expired_times.items()):
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
            if now - expired_time >= timedelta(hours=24):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                if not self._was_notification_sent(user_id, "post_expired"):
                    await self._send_post_expired_notification(user_id)
                    self._mark_notification_sent(user_id, "post_expired")
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
                del self.tariff_expired_times[user_id]

        for tariff in active_tariffs:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —É–∂–µ —Ç–∞—Ä–∏—Ñ
            if tariff.end_date <= now:
                # –¢–∞—Ä–∏—Ñ –∏—Å—Ç—ë–∫, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
                self.db.deactivate_user_tariff(tariff.user_id)

                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
                self.tariff_expired_times[tariff.user_id] = now

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                if not self._was_notification_sent(tariff.user_id, "expired"):
                    await self._send_expired_notification(tariff.user_id)
                    self._mark_notification_sent(tariff.user_id, "expired")
                continue

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            time_diff = tariff.end_date - now
            hours_left = time_diff.total_seconds() / 3600

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —á–µ—Ä–µ–∑ –¥–µ–Ω—å —Ç–∞—Ä–∏—Ñ—ã (–æ—Ç 23 –¥–æ 24 —á–∞—Å–æ–≤)
            if 23 <= hours_left <= 24:
                if not self._was_notification_sent(tariff.user_id, "day"):
                    await self._send_expiring_soon_notification(
                        tariff.user_id, hours_left, "–¥–µ–Ω—å"
                    )
                    self._mark_notification_sent(tariff.user_id, "day")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å —Ç–∞—Ä–∏—Ñ—ã (–æ—Ç 0.5 –¥–æ 1 —á–∞—Å–∞)
            elif 0.5 <= hours_left <= 1:
                if not self._was_notification_sent(tariff.user_id, "hour"):
                    await self._send_expiring_soon_notification(
                        tariff.user_id, hours_left * 60, "—á–∞—Å"
                    )
                    self._mark_notification_sent(tariff.user_id, "hour")

    def _was_notification_sent(self, user_id: int, notification_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        return (
            user_id in self.notifications_sent
            and notification_type in self.notifications_sent[user_id]
        )

    def _mark_notification_sent(self, user_id: int, notification_type: str):
        """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if user_id not in self.notifications_sent:
            self.notifications_sent[user_id] = set()
        self.notifications_sent[user_id].add(notification_type)
        logger.debug(
            f"–û—Ç–º–µ—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ {notification_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )

    async def _send_expiring_soon_notification(
        self, user_id: int, time_left: float, period: str
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞"""
        try:
            keyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="üîç  –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                            callback_data="buy_tariff",
                        )
                    ]
                ]
            )

            await self.bot.send_message(
                user_id,
                f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
                f"–í–∞—à —Ç–∞—Ä–∏—Ñ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {period}.\n"
                f"–ù–µ –∂–¥–∏—Ç–µ!\n\n"
                f"üîç  –ü—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–∏–¥–∞—Ö (–∑–∞—è–≤–∫–∞—Ö) –ø–æ –≤–∞—à–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.",
                reply_markup=keyboard,
            )
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ (—á–µ—Ä–µ–∑ {period}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
            )
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}"
            )

    async def _send_expired_notification(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞"""
        try:
            await self.bot.send_message(
                user_id,
                f"‚ùå <b>–¢–∞—Ä–∏—Ñ –∏—Å—Ç—ë–∫!</b>\n\n"
                f"–í–∞—à —Ç–∞—Ä–∏—Ñ –∏—Å—Ç—ë–∫. –¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö. "
                f"–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ.",
            )
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
            )
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}"
            )

    async def _send_post_expired_notification(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
        try:
            keyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="–ü—Ä–æ–¥–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ",
                            callback_data="buy_tariff",
                        )
                    ]
                ]
            )

            await self.bot.send_message(
                user_id,
                "–í—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç–µ —Å–æ—Ç–Ω–∏ –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å, –∏ –º–Ω–µ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ –æ—Ç —ç—Ç–æ–≥–æ üò¢\n\n"
                "–î–µ—Å—è—Ç–∫–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—É–±–ª–∏–∫—É—é—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∞–ø—à–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º üôå\n\n"
                "–ü–æ–ª—É—á–∏—Ç–µ –∫ –Ω–∏–º –¥–æ—Å—Ç—É–ø –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Å—å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üôÇ",
                reply_markup=keyboard,
            )
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
            )
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}"
            )

    @staticmethod
    def is_tariff_active(user_id: int, db: Database) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–∞—Ä–∏—Ñ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_tariff = db.get_user_tariff(user_id)

        if not user_tariff:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞
        if user_tariff.end_date <= datetime.now() or not user_tariff.is_active:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ, –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç—ë–∫, –Ω–æ –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω –≤ –ë–î
            if user_tariff.is_active:
                db.deactivate_user_tariff(user_id)
            return False

        return True

    @staticmethod
    def can_create_project(user_id: int, db: Database) -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –µ–≥–æ —Ç–∞—Ä–∏—Ñ—É

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–º–æ–∂–µ—Ç_—Å–æ–∑–¥–∞—Ç—å: bool, —Å–æ–æ–±—â–µ–Ω–∏–µ: str)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞
        if not TariffChecker.is_tariff_active(user_id, db):
            return False, "–í–∞—à —Ç–∞—Ä–∏—Ñ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫"

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tariff_info = db.get_user_tariff_info(user_id)

        if not tariff_info.get("has_tariff", False):
            return False, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        current_projects = tariff_info.get("current_projects", 0)
        max_projects = tariff_info.get("max_projects", 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤
        if current_projects >= max_projects:
            return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ ({max_projects}) –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"

        return True, "–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"

    @staticmethod
    def can_add_chat_to_project(
        user_id: int, project_id: int, db: Database
    ) -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç –≤ –ø—Ä–æ–µ–∫—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –µ–≥–æ —Ç–∞—Ä–∏—Ñ—É

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            project_id: ID –ø—Ä–æ–µ–∫—Ç–∞
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–º–æ–∂–µ—Ç_–¥–æ–±–∞–≤–∏—Ç—å: bool, —Å–æ–æ–±—â–µ–Ω–∏–µ: str)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞
        if not TariffChecker.is_tariff_active(user_id, db):
            return False, "–í–∞—à —Ç–∞—Ä–∏—Ñ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫"

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tariff_info = db.get_user_tariff_info(user_id)

        if not tariff_info.get("has_tariff", False):
            return False, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"

        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        max_chats_per_project = tariff_info.get("max_chats_per_project", 0)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        project = db.get_project(project_id)
        if not project or project.user_id != user_id:
            return False, "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞"

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        chats = db.get_project_chats(project_id, active_only=True)
        current_chats = len(chats)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        if current_chats >= max_chats_per_project:
            return (
                False,
                f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤ ({max_chats_per_project}) –≤ –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞",
            )

        return True, "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç"
