from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    PreCheckoutQuery,
    SuccessfulPayment,
    LabeledPrice,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

import logging
import time
from datetime import datetime, timedelta

from bot.yookassa import YooKassa
from bot.utils.funcs import add_balance_with_notification
from config.parameters_manager import ParametersManager
from db.database import Database

router = Router(name="payments")
db = Database()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ÆKassa —Å —Ç–æ–∫–µ–Ω–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
yookassa = YooKassa(
    provider_token=ParametersManager.get_parameter("yookassa_provider_token")
)


class DepositStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""

    waiting_for_amount = State()


class TariffPurchaseStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"""

    waiting_for_tariff = State()
    waiting_for_payment = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@router.callback_query(F.data == "deposit")
async def deposit_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    await state.set_state(DepositStates.waiting_for_amount)
    await callback.message.edit_text(
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º {ParametersManager.get_parameter('parse_comments_cost')}‚ÇΩ):\n\n"
        "üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ÆKassa\n"
        "üéâ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å\n\n"
        f"* –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}"
    )


@router.message(DepositStates.waiting_for_amount)
async def process_deposit_amount(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        amount = int(message.text)
        min_amount = int(ParametersManager.get_parameter("parse_comments_cost"))

        if amount < min_amount:
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - {min_amount}‚ÇΩ")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—á–µ—Ç–∞
        title = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
        description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–æ—Ç–µ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ"
        payload = f"deposit_{message.from_user.id}_{amount}"

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞
        success = await yookassa.create_invoice(
            bot=bot,
            chat_id=message.chat.id,
            title=title,
            description=description,
            payload=payload,
            amount=amount,
            photo_url="https://i.imgur.com/SBnJWog.png",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        )

        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º")


@router.callback_query(F.data.startswith("deposit_"))
async def auto_deposit(callback: CallbackQuery, bot: Bot):
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É"""
    try:
        amount = int(callback.data.split("_")[1])
        min_amount = int(ParametersManager.get_parameter("parse_comments_cost"))

        if amount < min_amount:
            amount = min_amount
            await callback.message.answer(
                f"‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - {min_amount}‚ÇΩ"
            )

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—á–µ—Ç–∞
        title = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
        description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–æ—Ç–µ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ"
        payload = f"deposit_{callback.from_user.id}_{amount}"

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞
        success = await yookassa.create_invoice(
            bot=bot,
            chat_id=callback.message.chat.id,
            title=title,
            description=description,
            payload=payload,
            amount=amount,
        )

        if not success:
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        await callback.message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
@router.callback_query(F.data == "buy_tariff")
async def show_available_tariffs(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    tariffs = db.get_all_tariff_plans(active_only=True)[1:]  # –ò—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–µ–≤–æ–π —Ç–∞—Ä–∏—Ñ

    if not tariffs:
        await callback.message.edit_text(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"
                        )
                    ]
                ]
            ),
        )
        return

    builder = InlineKeyboardBuilder()
    for tariff in tariffs:
        builder.button(
            text=f"{tariff.name} - {tariff.price}‚ÇΩ/–º–µ—Å",
            callback_data=f"select_tariff_{tariff.id}",
        )
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)

    text = "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
    for tariff in tariffs:
        text += (
            f"üìå {tariff.name}\n"
            f"üí∞ –¶–µ–Ω–∞: {tariff.price}‚ÇΩ/–º–µ—Å—è—Ü\n"
            f"üìä –ú–∞–∫—Å. –ø—Ä–æ–µ–∫—Ç–æ–≤: {tariff.max_projects}\n"
            f"üí¨ –ú–∞–∫—Å. —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {tariff.max_chats_per_project}\n\n"
        )

    await callback.message.edit_text(text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("select_tariff_"))
async def select_tariff(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    tariff_id = int(callback.data.split("_")[2])
    tariff = db.get_tariff_plan(tariff_id)

    if not tariff:
        await callback.message.edit_text(
            "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
                ]
            ),
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_tariff = db.get_user_tariff(callback.from_user.id)
    if current_tariff and current_tariff.tariff_plan_id != 1:  # –ù–µ –Ω—É–ª–µ–≤–æ–π —Ç–∞—Ä–∏—Ñ
        current_plan = db.get_tariff_plan(current_tariff.tariff_plan_id)
        await callback.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {current_plan.name}\n"
            f"–û–Ω –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: {tariff.name}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –î–∞", callback_data=f"confirm_tariff_{tariff_id}"
                        )
                    ],
                    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="buy_tariff")],
                ]
            ),
        )
        return

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É
    amount = tariff.price
    timestamp = int(time.time())
    payload = f"tariff_{callback.from_user.id}_{tariff_id}_{timestamp}"

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞
    success = await yookassa.create_invoice(
        bot=bot,
        chat_id=callback.message.chat.id,
        title=f"–¢–∞—Ä–∏—Ñ {tariff.name}",
        description=f"–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff.name} –Ω–∞ 30 –¥–Ω–µ–π",
        payload=payload,
        amount=tariff.price,
        photo_url="https://i.imgur.com/nVDuuOD.png",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    )

    if not success:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
                ]
            ),
        )
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞
    await callback.message.edit_text(
        f"üí∞ –°—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–∞—Ä–∏—Ñ–∞ {tariff.name} —Å–æ–∑–¥–∞–Ω\n"
        f"–°—É–º–º–∞: {amount}‚ÇΩ\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—á–µ—Ç–æ–º –≤—ã—à–µ\n"
        f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        f"–ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="buy_tariff"
                    )
                ]
            ]
        ),
    )


@router.callback_query(F.data.startswith("confirm_tariff_"))
async def confirm_tariff_selection(callback: CallbackQuery, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ"""
    tariff_id = int(callback.data.split("_")[2])
    tariff = db.get_tariff_plan(tariff_id)

    if not tariff:
        await callback.message.edit_text(
            "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
                ]
            ),
        )
        return

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É
    amount = tariff.price
    timestamp = int(time.time())
    payload = f"tariff_{callback.from_user.id}_{tariff_id}_{timestamp}"

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞
    success = await yookassa.create_invoice(
        bot=bot,
        chat_id=callback.message.chat.id,
        title=f"–¢–∞—Ä–∏—Ñ {tariff.name}",
        description=f"–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff.name} –Ω–∞ 30 –¥–Ω–µ–π",
        payload=payload,
        amount=tariff.price,
        photo_url="https://i.imgur.com/nVDuuOD.png",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    )

    if not success:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_tariff")]
                ]
            ),
        )
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞
    await callback.message.edit_text(
        f"üí∞ –°—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–∞—Ä–∏—Ñ–∞ {tariff.name} —Å–æ–∑–¥–∞–Ω\n"
        f"–°—É–º–º–∞: {amount}‚ÇΩ\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—á–µ—Ç–æ–º –≤—ã—à–µ\n"
        f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        f"–ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="buy_tariff"
                    )
                ]
            ]
        ),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ–ø–ª–∞—Ç—ã Telegram
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pre_checkout_query: {e}")
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message="–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )


@router.message(F.successful_payment)
async def process_successful_payment(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    payload = payment.invoice_payload

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
    payment_data = yookassa.parse_invoice_payload(payload)

    if payment_data["type"] == "deposit":
        # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        user_id = payment_data["user_id"]
        amount = payment_data["amount"]

        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.update_balance(user_id, amount)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        db.make_payment(user_id, amount)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ!\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {db.get_user(user_id).balance}‚ÇΩ"
        )

    elif payment_data["type"] == "tariff":
        # –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞
        user_id = payment_data["user_id"]
        tariff_id = payment_data["tariff_id"]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        tariff = db.get_tariff_plan(tariff_id)

        if tariff:
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ 30 –¥–Ω–µ–π
            db.assign_tariff_to_user(user_id, tariff_id, duration_days=30)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"‚úÖ –¢–∞—Ä–∏—Ñ {tariff.name} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"–¢–∞—Ä–∏—Ñ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {(datetime.now() + timedelta(days=30)).strftime('%d.%m.%Y')}\n\n"
                f"–ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–µ–∫—Ç–æ–≤: {tariff.max_projects}\n"
                f"–ú–∞–∫—Å–∏–º—É–º —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {tariff.max_chats_per_project}"
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞: {payment_data}")
        await message.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
