import logging
from typing import Optional
from aiogram import Bot, Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import LabeledPrice

from bot.payment_systems import PaymentSystems
from bot.utils.funcs import add_balance_with_notification, error_notify
from config.parameters_manager import ParametersManager
from db.database import Database

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
router = Router(name="payments")
db = Database()
payment_systems = PaymentSystems()
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PaymentStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_payment_method = State()
    waiting_for_payment_confirmation = State()


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
async def process_payment(
    bot: Bot,
    user_id: int,
    amount: float,
    title: str,
    description: str,
    payload: str,
    payment_method: str = "yookassa",
    photo_url: Optional[str] = None,
) -> bool:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã

    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ä—É–±–ª—è—Ö
    :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–∞—Ç–µ–∂–∞
    :param description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    :param payload: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
    :param payment_method: –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã ("yookassa" –∏–ª–∏ "freekassa")
    :param photo_url: URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Å—á–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è YooKassa)
    :return: True, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω
    """
    try:
        logger.info(
            f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {payment_method}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, —Å—É–º–º–∞: {amount}‚ÇΩ"
        )

        if payment_method == "yookassa":
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
            success = await payment_systems.create_yookassa_invoice(
                bot=bot,
                chat_id=user_id,
                title=title,
                description=description,
                payload=payload,
                amount=int(amount), 
                photo_url=photo_url,
            )
            return success

        elif payment_method == "freekassa":
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ FreeKassa
            payment_url = payment_systems.create_freekassa_payment(
                amount=amount, order_id=payload
            )

            if payment_url:
                keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url
                            )
                        ],
                        [
                            types.InlineKeyboardButton(
                                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment"
                            )
                        ],
                    ]
                )

                await bot.send_message(
                    user_id,
                    f"üí∞ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω\n"
                    f"ID –ø–ª–∞—Ç–µ–∂–∞: {payload}\n\n"
                    "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª\n"
                    "2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n"
                    "3. –î–µ–Ω—å–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å\n\n"
                    f"–ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}",
                    reply_markup=keyboard,
                )
                return True
            return False

        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}")
            return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ YooKassa
@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: types.PreCheckoutQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Telegram Payments API
    """
    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
        logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {pre_checkout_query.id}")
        logger.info(
            f"–°—É–º–º–∞: {pre_checkout_query.total_amount} {pre_checkout_query.currency}"
        )
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {pre_checkout_query.invoice_payload}")

        # –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ —ç—Ç–∞–ø–µ pre-checkout
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –≤ successful_payment
        await pre_checkout_query.answer(ok=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ YooKassa
@router.message(F.successful_payment)
async def successful_payment_handler(message: types.Message, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç Telegram Payments API
    """
    try:
        payment = message.successful_payment

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {payment.telegram_payment_charge_id}")
        logger.info(f"–°—É–º–º–∞: {payment.total_amount} {payment.currency}")
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {payment.invoice_payload}")

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payload = payment.invoice_payload

        amount = payment.total_amount

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π
        if payload.startswith("deposit_"):
            # –ü–ª–∞—Ç–µ–∂ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            user_id = int(payload.split("_")[1])
            await add_balance_with_notification(user_id, amount, bot)

            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n" f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ."
            )

        elif payload.startswith("tariff_"):
            # –ü–ª–∞—Ç–µ–∂ –∑–∞ —Ç–∞—Ä–∏—Ñ
            parts = payload.split("_")
            if len(parts) >= 3:
                user_id = int(parts[1])
                tariff_id = int(parts[2])

                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_tariff = db.assign_tariff_to_user(user_id, tariff_id)

                if user_tariff:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    tariff = db.get_tariff_plan(tariff_id)
                    current_tariff = db.get_user_tariff(user_id)

                    if current_tariff and current_tariff.tariff_plan_id != tariff_id:
                        current_tariff_plan = db.get_tariff_plan(
                            current_tariff.tariff_plan_id
                        )
                        await message.answer(
                            f"‚úÖ –¢–∞—Ä–∏—Ñ {tariff.name} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                            f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞—Ä–∏—Ñ {current_tariff_plan.name} –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω.\n"
                            f"–ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_tariff.end_date.strftime('%d.%m.%Y')}",
                        )
                    else:
                        await message.answer(
                            f"‚úÖ –¢–∞—Ä–∏—Ñ {tariff.name} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_tariff.end_date.strftime('%d.%m.%Y')}",
                        )

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    await error_notify(
                        bot,
                        f"üí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞!\n\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                        f"–¢–∞—Ä–∏—Ñ: {tariff.name}\n"
                        f"–°—É–º–º–∞: {amount}‚ÇΩ\n"
                        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_tariff.end_date.strftime('%d.%m.%Y')}",
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª —Ç–∞—Ä–∏—Ñ {tariff.name}",
                        user_id,
                    )
                else:
                    await message.answer(
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞. "
                        f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}"
                    )
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞: {payload}")
            await message.answer(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: "
                f"{ParametersManager.get_parameter('support_link')}"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. "
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}"
        )
