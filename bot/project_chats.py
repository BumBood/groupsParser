from typing import Optional
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from db.database import Database
from client.monitoring_setup import MonitoringSystem
from bot.projects_keyboards import (
    chats_list_keyboard,
    chat_manage_keyboard,
    project_manage_keyboard,
    cancel_keyboard,
    confirm_keyboard,
)
from bot.utils.states import ChatStates

router = Router(name="project_chats")
db = Database()


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
@router.callback_query(F.data.startswith("project_chats|"))
async def list_project_chats(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id = int(callback.data.split("|")[1])
    project = db.get_project(project_id)

    if not project:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=cancel_keyboard("projects_list")
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if project.user_id != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.", show_alert=True)
        return

    chats = db.get_project_chats(project_id)

    if not chats:
        await callback.message.edit_text(
            f"üìã <b>–ß–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞</b>: {project.name}\n\n"
            f"–£ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤. "
            f"–î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
            reply_markup=chats_list_keyboard([], project_id),
            parse_mode="HTML",
        )
        return

    chats_text = "\n".join(
        [
            f"{'üü¢' if chat.is_active else 'üî¥'} <b>{chat.chat_title or chat.chat_id}</b>"
            for chat in chats
        ]
    )

    await callback.message.edit_text(
        f"üìã <b>–ß–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞</b>: {project.name}\n\n"
        f"{chats_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=chats_list_keyboard(chats, project_id),
        parse_mode="HTML",
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ - –Ω–∞—á–∞–ª–æ
@router.callback_query(F.data.startswith("add_chat|"))
async def add_chat_start(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç"""
    project_id = int(callback.data.split("|")[1])
    project = db.get_project(project_id)

    if not project:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=cancel_keyboard("projects_list")
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if project.user_id != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.", show_alert=True)
        return

    await state.set_state(ChatStates.add_chat_id)
    await state.update_data(project_id=project_id)

    await callback.message.edit_text(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç</b>: {project.name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º.\n\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: @channel_name –∏–ª–∏ https://t.me/channel_name</i>",
        reply_markup=cancel_keyboard(f"project_chats|{project_id}"),
        parse_mode="HTML",
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ - –≤–≤–æ–¥ ID –∏–ª–∏ —Å—Å—ã–ª–∫–∏
@router.message(ChatStates.add_chat_id)
async def add_chat_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ID —á–∞—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏"""
    chat_id_or_link = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    project_id = data.get("project_id")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π Telegram
    chat_id = chat_id_or_link
    if chat_id_or_link.startswith("https://t.me/"):
        if "/+" in chat_id_or_link:
            # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            await message.answer(
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –≥—Ä—É–ø–ø—ã.",
                parse_mode="HTML",
                reply_markup=cancel_keyboard(f"project_chats|{project_id}"),
            )
            return
        else:
            # –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞
            username = chat_id_or_link.split("/")[-1]
            chat_id = "@" + username

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞
    suggested_title = chat_id.replace("@", "")

    await state.update_data(chat_id=chat_id, suggested_title=suggested_title)
    await state.set_state(ChatStates.add_chat_title)

    await message.answer(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞</b>\n\n"
        f"–ß–∞—Ç: <code>{chat_id}</code>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ):",
        reply_markup=cancel_keyboard(),
        parse_mode="HTML",
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ - –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(ChatStates.add_chat_title)
async def add_chat_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
    chat_title = message.text.strip()

    if len(chat_title) > 50:
        await message.answer(
            "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    await state.update_data(chat_title=chat_title)
    await state.set_state(ChatStates.add_keywords)

    await message.answer(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{chat_title}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
        f"–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–ê–ñ–ù–û: –ø—Ä–æ–±–µ–ª –¢–û–ñ–ï –≤—Ö–æ–¥–∏—Ç –≤ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:",
        reply_markup=cancel_keyboard(),
        parse_mode="HTML",
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ - –≤–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
@router.message(ChatStates.add_keywords)
async def add_chat_keywords(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    keywords = None if message.text == "-" else message.text

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    project_id = data.get("project_id")
    chat_id = data.get("chat_id")
    chat_title = data.get("chat_title")

    project = db.get_project(project_id)
    if not project:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=cancel_keyboard("projects_list")
        )
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑ –±–æ—Ç–∞
    monitoring_system = message.bot.monitoring_system

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —á–∞—Ç–∞
    if monitoring_system and not await monitoring_system.check_available_sessions():
        await message.answer(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É "
            "–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é Telegram –≤ —Å–∏—Å—Ç–µ–º—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=project_manage_keyboard(project),
            parse_mode="HTML",
        )
        await state.clear()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∞—Ç –∞–∫—Ç–∏–≤–Ω—ã–π)
    chat = db.add_chat_to_project(
        project_id=project_id,
        chat_id=chat_id,
        chat_title=chat_title,
        keywords=keywords,
        is_active=True,
    )

    await state.clear()

    if not chat:
        await message.answer(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ –ø—Ä–æ–µ–∫—Ç.\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç —á–∞—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.",
            reply_markup=project_manage_keyboard(project),
            parse_mode="HTML",
        )
        return

    # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –∏ –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if project.is_active and monitoring_system:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç
        join_success = await monitoring_system.join_chat(chat.id)
        if join_success:
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            monitor_success = await monitoring_system.add_chat_to_monitoring(
                project_id, chat.id
            )
            if monitor_success:
                await message.answer(
                    "‚úÖ <b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                    f"–ß–∞—Ç: <b>{chat.chat_title}</b>\n"
                    f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords or '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n"
                    f"–°—Ç–∞—Ç—É—Å: üü¢ –ê–∫—Ç–∏–≤–µ–Ω (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç)",
                    reply_markup=chat_manage_keyboard(chat, project_id),
                    parse_mode="HTML",
                )
            else:
                await message.answer(
                    "‚ö†Ô∏è <b>–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n\n"
                    f"–ß–∞—Ç: <b>{chat.chat_title}</b>\n"
                    f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords or '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n"
                    f"–°—Ç–∞—Ç—É—Å: üü¢ –ê–∫—Ç–∏–≤–µ–Ω (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)",
                    reply_markup=chat_manage_keyboard(chat, project_id),
                    parse_mode="HTML",
                )
        else:
            await message.answer(
                "‚ö†Ô∏è <b>–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç</b>\n\n"
                f"–ß–∞—Ç: <b>{chat.chat_title}</b>\n"
                f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords or '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n"
                f"–°—Ç–∞—Ç—É—Å: üü¢ –ê–∫—Ç–∏–≤–µ–Ω (–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å)\n\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω —é–∑–µ—Ä–Ω–µ–π–º/—Å—Å—ã–ª–∫–∞.",
                reply_markup=chat_manage_keyboard(chat, project_id),
                parse_mode="HTML",
            )
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        status_text = (
            "üü¢ –ê–∫—Ç–∏–≤–µ–Ω (–ø—Ä–æ–µ–∫—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)"
            if not project.is_active
            else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω (—Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"
        )
        await message.answer(
            f"‚úÖ <b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"–ß–∞—Ç: <b>{chat.chat_title}</b>\n"
            f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords or '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}",
            reply_markup=chat_manage_keyboard(chat, project_id),
            parse_mode="HTML",
        )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Ç–æ–≤ - –Ω–∞—á–∞–ª–æ
@router.callback_query(F.data.startswith("add_multiple_chats|"))
async def add_multiple_chats_start(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç"""
    project_id = int(callback.data.split("|")[1])
    project = db.get_project(project_id)

    if not project:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=cancel_keyboard("projects_list")
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if project.user_id != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.", show_alert=True)
        return

    await state.set_state(ChatStates.add_multiple_chats)
    await state.update_data(project_id=project_id)

    await callback.message.edit_text(
        f"‚ûï‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç</b>: {project.name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º—ã, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        f"@channel1\n"
        f"https://t.me/channel2\n"
        f"@group3</i>",
        reply_markup=cancel_keyboard(f"project_chats|{project_id}"),
        parse_mode="HTML",
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Ç–æ–≤ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
@router.message(ChatStates.add_multiple_chats)
async def add_multiple_chats_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
    chats_list_raw = message.text.strip().split("\n")

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    chats_list_raw = [chat.strip() for chat in chats_list_raw if chat.strip()]

    if not chats_list_raw:
        await message.answer(
            "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–∞—Ç.",
            reply_markup=cancel_keyboard(),
        )
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram
    chats_list = []
    for chat_id_or_link in chats_list_raw:
        if chat_id_or_link.startswith("https://t.me/"):
            # –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞
            username = chat_id_or_link.split("/")[-1]
            chat_id = f"@{username}"
            chats_list.append({"chat_id": chat_id, "title": username})
        else:
            # –ü—Ä–æ—Å—Ç–æ —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID
            chat_id = chat_id_or_link
            title = chat_id.replace("@", "")
            chats_list.append({"chat_id": chat_id, "title": title})

    if not chats_list:
        await message.answer(
            "‚ö†Ô∏è –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –≥—Ä—É–ø–ø—ã.",
            reply_markup=cancel_keyboard(),
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(chats_list=chats_list)
    await state.set_state(ChatStates.add_multiple_keywords)

    await message.answer(
        f"‚ûï‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(chats_list)} —á–∞—Ç–æ–≤</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
        f"–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–ê–ñ–ù–û: –ø—Ä–æ–±–µ–ª –¢–û–ñ–ï –≤—Ö–æ–¥–∏—Ç –≤ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:",
        reply_markup=cancel_keyboard(),
        parse_mode="HTML",
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Ç–æ–≤ - —É–∫–∞–∑–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
@router.message(ChatStates.add_multiple_keywords)
async def add_multiple_chats_keywords(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤"""
    keywords = None if message.text == "-" else message.text

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    project_id = data.get("project_id")
    chats_data = data.get("chats_list", [])

    project = db.get_project(project_id)
    if not project:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=cancel_keyboard("projects_list")
        )
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑ –±–æ—Ç–∞
    monitoring_system = message.bot.monitoring_system

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —á–∞—Ç–æ–≤
    if monitoring_system and not await monitoring_system.check_available_sessions():
        await message.answer(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É "
            "–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é Telegram –≤ —Å–∏—Å—Ç–µ–º—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=project_manage_keyboard(project),
            parse_mode="HTML",
        )
        await state.clear()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç
    added_chats = []
    failed_chats = []

    for chat_info in chats_data:
        chat = db.add_chat_to_project(
            project_id=project_id,
            chat_id=chat_info["chat_id"],
            chat_title=chat_info["title"],
            keywords=keywords,
        )
        if chat:
            added_chats.append(chat)
        else:
            failed_chats.append(chat_info["chat_id"])

    await state.clear()

    if not added_chats:
        await message.answer(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω —á–∞—Ç –≤ –ø—Ä–æ–µ–∫—Ç.\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–∏ —á–∞—Ç—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.",
            reply_markup=project_manage_keyboard(project),
            parse_mode="HTML",
        )
        return

    # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞,
    # –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    activated_chats = 0
    if project.is_active and monitoring_system:
        for chat in added_chats:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç
            join_success = await monitoring_system.join_chat(chat.id)
            if join_success:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                monitor_success = await monitoring_system.add_chat_to_monitoring(
                    project_id, chat.id
                )
                if monitor_success:
                    activated_chats += 1

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_text = f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —á–∞—Ç–æ–≤:</b> {len(added_chats)}"
    if failed_chats:
        result_text += f"\n‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å:</b> {len(failed_chats)}"

    if project.is_active and monitoring_system:
        result_text += (
            f"\n\nüîç <b>–ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {activated_chats} –∏–∑ {len(added_chats)}"
        )

    await message.answer(
        f"{result_text}\n\n"
        f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords or '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.",
        reply_markup=project_manage_keyboard(project),
        parse_mode="HTML",
    )


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
@router.callback_query(F.data.startswith("chat|"))
async def view_chat(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ"""
    chat_id = int(callback.data.split("|")[1])
    chat = db.get_chat(chat_id)

    if not chat:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=cancel_keyboard("projects_list")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    project = db.get_project(chat.project_id)
    if not project or project.user_id != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.", show_alert=True)
        return

    status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if chat.is_active and project.is_active else "üî¥ –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
    if not project.is_active:
        status += " (–ø—Ä–æ–µ–∫—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)"

    await callback.message.edit_text(
        f"üì± <b>–ß–∞—Ç</b>: {chat.chat_title}\n\n"
        f"ID: <code>{chat.chat_id}</code>\n"
        f"–ü—Ä–æ–µ–∫—Ç: <b>{project.name}</b>\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {chat.keywords or '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=chat_manage_keyboard(chat),
        parse_mode="HTML",
    )


# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞
@router.callback_query(F.data.startswith("toggle_chat|"))
async def toggle_chat(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞"""
    params = callback.data.split("|")
    chat_id = int(params[1])
    project_id = int(params[2])

    chat = db.get_chat(chat_id)
    project = db.get_project(project_id)

    if not chat or not project:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ß–∞—Ç –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=cancel_keyboard("projects_list")
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if project.user_id != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.", show_alert=True)
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞
    updated_chat = db.toggle_chat_status(chat_id)

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑ –±–æ—Ç–∞
    monitoring_system = callback.bot.monitoring_system

    if updated_chat:
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if project.is_active:
            if updated_chat.is_active:
                # –ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                if monitoring_system:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç
                    join_success = await monitoring_system.join_chat(chat.id)
                    if join_success:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                        monitor_success = (
                            await monitoring_system.add_chat_to_monitoring(
                                project_id, chat.id
                            )
                        )
                        if monitor_success:
                            await callback.answer(
                                "–ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!", show_alert=True
                            )
                        else:
                            await callback.answer(
                                "–ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.",
                                show_alert=True,
                            )
                    else:
                        await callback.answer(
                            "–ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç. "
                            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞.",
                            show_alert=True,
                        )
                else:
                    await callback.answer(
                        "–ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                        show_alert=True,
                    )
            else:
                # –ß–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                if monitoring_system:
                    await monitoring_system.remove_chat_from_monitoring(chat_id)
                    await callback.answer(
                        "–ß–∞—Ç –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True
                    )
                else:
                    await callback.answer(
                        "–ß–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                        show_alert=True,
                    )
        else:
            # –ü—Ä–æ–µ–∫—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
            status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if updated_chat.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            await callback.answer(
                f"–ß–∞—Ç {status}, –Ω–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if updated_chat.is_active else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        await callback.message.edit_text(
            f"üëÅ‚Äçüó® <b>–ß–∞—Ç: {updated_chat.chat_title or updated_chat.chat_id}</b>\n\n"
            f"ID: <code>{updated_chat.chat_id}</code>\n"
            f"–°—Ç–∞—Ç—É—Å: {chat_status}\n"
            f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {updated_chat.keywords or '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=chat_manage_keyboard(updated_chat, project_id),
            parse_mode="HTML",
        )
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞.", show_alert=True)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - –Ω–∞—á–∞–ª–æ
@router.callback_query(F.data.startswith("chat_keywords|"))
async def edit_keywords_start(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    chat_id = int(callback.data.split("|")[1])
    chat = db.get_chat(chat_id)

    if not chat:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=cancel_keyboard("projects_list")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    project = db.get_project(chat.project_id)
    if not project or project.user_id != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.", show_alert=True)
        return

    await state.set_state(ChatStates.edit_keywords)
    await state.update_data(chat_id=chat_id)

    await callback.message.edit_text(
        f"üîë <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</b>\n\n"
        f"–ß–∞—Ç: <b>{chat.chat_title}</b>\n"
        f"–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {chat.keywords or '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) "
        f"–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–ê–ñ–ù–û: –ø—Ä–æ–±–µ–ª –¢–û–ñ–ï –≤—Ö–æ–¥–∏—Ç –≤ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:",
        reply_markup=cancel_keyboard(f"chat|{chat_id}"),
        parse_mode="HTML",
    )


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@router.message(ChatStates.edit_keywords)
async def edit_keywords_save(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    keywords = None if message.text == "-" else message.text

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    chat_id = data.get("chat_id")
    project_id = data.get("project_id")

    chat = db.get_chat(chat_id)
    project = db.get_project(project_id)

    if not chat or not project:
        await message.answer(
            "‚ö†Ô∏è –ß–∞—Ç –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=cancel_keyboard("projects_list"),
        )
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑ –±–æ—Ç–∞
    monitoring_system = message.bot.monitoring_system

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ë–î
    updated_chat = db.update_chat(chat_id=chat_id, keywords=keywords)

    await state.clear()

    if updated_chat:
        # –ï—Å–ª–∏ —á–∞—Ç –∏ –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        if updated_chat.is_active and project.is_active and monitoring_system:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await monitoring_system.remove_chat_from_monitoring(chat_id)
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            monitor_success = await monitoring_system.add_chat_to_monitoring(
                project.id, chat_id
            )
            if monitor_success:
                await message.answer(
                    "‚úÖ <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                    f"–ß–∞—Ç: <b>{updated_chat.chat_title or updated_chat.chat_id}</b>\n"
                    f"–ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords or '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n"
                    f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.",
                    reply_markup=chat_manage_keyboard(updated_chat, project_id),
                    parse_mode="HTML",
                )
            else:
                await message.answer(
                    "‚úÖ <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                    f"–ß–∞—Ç: <b>{updated_chat.chat_title or updated_chat.chat_id}</b>\n"
                    f"–ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords or '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n"
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.",
                    reply_markup=chat_manage_keyboard(updated_chat, project_id),
                    parse_mode="HTML",
                )
        else:
            status_info = ""
            if not updated_chat.is_active:
                status_info = "–ß–∞—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω."
            elif not project.is_active:
                status_info = "–ü—Ä–æ–µ–∫—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω."
            elif not monitoring_system:
                status_info = "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

            await message.answer(
                f"‚úÖ <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                f"–ß–∞—Ç: <b>{updated_chat.chat_title or updated_chat.chat_id}</b>\n"
                f"–ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords or '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n"
                f"{status_info}",
                reply_markup=chat_manage_keyboard(updated_chat, project_id),
                parse_mode="HTML",
            )
    else:
        await message.answer(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.",
            reply_markup=chat_manage_keyboard(chat, project_id),
            parse_mode="HTML",
        )


# –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ - –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(F.data.startswith("delete_chat|"))
async def delete_chat_confirm(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
    chat_id = int(callback.data.split("|")[1])
    chat = db.get_chat(chat_id)

    if not chat:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=cancel_keyboard("projects_list")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    project = db.get_project(chat.project_id)
    if not project or project.user_id != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.", show_alert=True)
        return

    await state.set_state(ChatStates.delete_confirm)
    await state.update_data(chat_id=chat_id)

    await callback.message.edit_text(
        f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–∞—Ç <b>{chat.chat_title}</b> –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ <b>{project.name}</b>?\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=confirm_keyboard(
            confirm_callback=f"confirm_delete_chat|{chat_id}|{project.id}",
            cancel_callback=f"chat|{chat_id}",
        ),
        parse_mode="HTML",
    )


# –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("confirm_delete_chat|"))
async def delete_chat_execute(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
    params = callback.data.split("|")
    chat_id = int(params[1])
    project_id = int(params[2])

    chat = db.get_chat(chat_id)
    project = db.get_project(project_id)

    if not chat or not project:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ß–∞—Ç –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=cancel_keyboard("projects_list"),
        )
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if project.user_id != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.", show_alert=True)
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑ –±–æ—Ç–∞
    monitoring_system = callback.bot.monitoring_system

    # –ï—Å–ª–∏ —á–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    if monitoring_system and chat.is_active:
        await monitoring_system.remove_chat_from_monitoring(chat_id)

    # –£–¥–∞–ª—è–µ–º —á–∞—Ç
    success = db.delete_chat(chat_id)

    await state.clear()

    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
            f"–ß–∞—Ç <b>{chat.chat_title or chat.chat_id}</b> –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ "
            f"<b>{project.name}</b> –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
            reply_markup=cancel_keyboard(f"project_chats|{project_id}"),
            parse_mode="HTML",
        )
    else:
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç.",
            reply_markup=cancel_keyboard(f"project_chats|{project_id}"),
            parse_mode="HTML",
        )
