import asyncio
from flask import Flask, request, jsonify
from bot.freekassa import FreeKassa
from config.parameters_manager import ParametersManager
from db.database import Database
import logging
from bot.utils.funcs import add_balance_with_notification, error_notify
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
import json

app = Flask(__name__)
db = Database()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("payment_webhook.log")],
)
logger = logging.getLogger(__name__)

asyncio.new_event_loop()

freekassa = FreeKassa(
    shop_id=int(ParametersManager.get_parameter("shop_id")),
    secret_word_1=str(ParametersManager.get_parameter("secret_word_1")),
    secret_word_2=str(ParametersManager.get_parameter("secret_word_2")),
)

bot = Bot(
    token=ParametersManager.get_parameter("bot_token"),
    default=DefaultBotProperties(parse_mode="HTML"),
)


@app.route("/tracking/payment/notification", methods=["POST"])
async def payment_notification():
    try:
        logging.info(f"Content-Type: {request.content_type}")
        logging.info(f"Form –¥–∞–Ω–Ω—ã–µ: {request.form}")

        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        if request.is_json:
            data = request.get_json()
        else:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á –∏–∑ form-data, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç JSON —Å—Ç—Ä–æ–∫—É
            json_str = next(iter(request.form))
            data = json.loads(json_str)
            logging.info(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        merchant_id = data.get("MERCHANT_ID")
        amount = data.get("AMOUNT")
        order_id = data.get("MERCHANT_ORDER_ID")
        sign = data.get("SIGN")

        if not all([merchant_id, amount, order_id, sign]):
            logging.error(
                f"Missing required parameters: {merchant_id}, {amount}, {order_id}, {sign}"
            )
            return jsonify({"error": "Missing required parameters"}), 400

        if not freekassa.check_payment_signature(merchant_id, amount, order_id, sign):
            logging.error(f"Invalid signature: {sign}")
            return jsonify({"error": "Invalid signature"}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –ø–æ order_id
        if order_id.startswith("tariff_"):
            # –ü–ª–∞—Ç–µ–∂ –∑–∞ —Ç–∞—Ä–∏—Ñ
            _, user_id, tariff_id, _ = order_id.split("_")
            user_id = int(user_id)
            tariff_id = int(tariff_id)

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_tariff = db.assign_tariff_to_user(user_id, tariff_id)
            if not user_tariff:
                await error_notify(
                    bot,
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}",
                    f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ {tariff_id}",
                    user_id,
                )
                return jsonify({"error": "Failed to activate tariff"}), 500

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            tariff = db.get_tariff_plan(tariff_id)
            current_tariff = db.get_user_tariff(user_id)
            if current_tariff and current_tariff.tariff_plan_id != tariff_id:
                current_tariff_plan = db.get_tariff_plan(current_tariff.tariff_plan_id)
                await bot.send_message(
                    user_id,
                    f"‚úÖ –¢–∞—Ä–∏—Ñ {tariff.name} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                    f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞—Ä–∏—Ñ {current_tariff_plan.name} –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω.\n"
                    f"–ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_tariff.end_date.strftime('%d.%m.%Y')}",
                )
            else:
                await bot.send_message(
                    user_id,
                    f"‚úÖ –¢–∞—Ä–∏—Ñ {tariff.name} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                    f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_tariff.end_date.strftime('%d.%m.%Y')}",
                )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await error_notify(
                bot,
                f"üí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                f"–¢–∞—Ä–∏—Ñ: {tariff.name}\n"
                f"–°—É–º–º–∞: {amount}‚ÇΩ\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_tariff.end_date.strftime('%d.%m.%Y')}",
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª —Ç–∞—Ä–∏—Ñ {tariff.name}",
                user_id,
            )
        else:
            # –û–±—ã—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            user_id = int(order_id.split("_")[0])
            await add_balance_with_notification(user_id, float(amount), bot)

        return "YES", 200

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    app.run(host="185.178.44.180", port=22)
